<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;    android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;            android:theme=&quot;@style/Theme.Voiceapp.NoActionBar&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.VoiceApp&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.Voiceapp&quot;&#13;&#10;        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&#13;&#10;        android:usesCleartextTraffic=&quot;true&quot;&#13;&#10;        android:enableOnBackInvokedCallback=&quot;true&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Voiceapp.NoActionBar&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/settings/SettingsFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/settings/SettingsFragment.kt" />
              <option name="originalContent" value="package com.example.voiceapp.ui.settings&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import com.example.voiceapp.databinding.FragmentSettingsBinding&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.graphics.Canvas&#10;import android.graphics.Paint&#10;import android.graphics.Path&#10;import android.graphics.RectF&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;&#10;class SettingsFragment : Fragment() {&#10;&#10;    private var _binding: FragmentSettingsBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var sharedPreferences: SharedPreferences&#10;&#10;    companion object {&#10;        private const val PREFS_NAME = &quot;user_settings&quot;&#10;        private const val KEY_USER_NAME = &quot;user_name&quot;&#10;        private const val KEY_AGENT_NAME = &quot;agent_name&quot;&#10;        private const val KEY_USER_ICON_URI = &quot;user_icon_uri&quot;&#10;        private const val KEY_PERSONALITY = &quot;personality&quot;&#10;&#10;        // デフォルト値&#10;        const val DEFAULT_USER_NAME = &quot;ユーザー&quot;&#10;        const val DEFAULT_AGENT_NAME = &quot;AIアシスタント&quot;&#10;        const val DEFAULT_PERSONALITY = &quot;kind&quot; // playful | kind | objective&#10;&#10;        fun getUserName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_USER_NAME, DEFAULT_USER_NAME) ?: DEFAULT_USER_NAME&#10;        }&#10;&#10;        fun getAgentName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME) ?: DEFAULT_AGENT_NAME&#10;        }&#10;&#10;        fun getUserIconUri(context: Context): Uri? {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            val value = prefs.getString(KEY_USER_ICON_URI, null)&#10;            return value?.let { Uri.parse(it) }&#10;        }&#10;&#10;        fun getPersonality(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_PERSONALITY, DEFAULT_PERSONALITY) ?: DEFAULT_PERSONALITY&#10;        }&#10;    }&#10;&#10;    interface OnSettingsSavedListener {&#10;        fun onSettingsSaved()&#10;    }&#10;    private var settingsSavedListener: OnSettingsSavedListener? = null&#10;&#10;    override fun onAttach(context: Context) {&#10;        super.onAttach(context)&#10;        if (context is OnSettingsSavedListener) {&#10;            settingsSavedListener = context&#10;        }&#10;    }&#10;&#10;    override fun onDetach() {&#10;        super.onDetach()&#10;        settingsSavedListener = null&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentSettingsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        sharedPreferences = requireContext().getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        loadUserSettings()&#10;        setupClickListeners()&#10;    }&#10;&#10;    //    private fun setupUI() {&#10;    //        // APIキーの状態を表示&#10;    //        val apiKey = BuildConfig.OPENAI_API_KEY&#10;    //        if (apiKey.isNotEmpty() &amp;&amp; apiKey != &quot;your_openai_api_key_here&quot;) {&#10;    //            binding.tvApiKeyStatus.text = &quot;APIキー: 設定済み (${apiKey.take(10)}...)&quot;&#10;    //        } else {&#10;    //            binding.tvApiKeyStatus.text = &quot;APIキー: 未設定&quot;&#10;    //        }&#10;    //&#10;    //        // Base URLを表示&#10;    //        binding.tvBaseUrlStatus.text = &quot;Base URL: ${BuildConfig.OPENAI_BASE_URL}&quot;&#10;    //    }&#10;&#10;    private fun loadUserSettings() {&#10;        // 保存された設定を読み込み&#10;        val userName = sharedPreferences.getString(KEY_USER_NAME, DEFAULT_USER_NAME)&#10;        val agentName = sharedPreferences.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME)&#10;        val iconUriString = sharedPreferences.getString(KEY_USER_ICON_URI, null)&#10;        val personality = sharedPreferences.getString(KEY_PERSONALITY, DEFAULT_PERSONALITY)&#10;&#10;        binding.etUserName.setText(userName)&#10;        binding.etAgentName.setText(agentName)&#10;        if (iconUriString != null) {&#10;            val uri = Uri.parse(iconUriString)&#10;            binding.ivUserIcon.setImageURI(uri)&#10;        }&#10;        // 性格ラジオ反映&#10;        when (personality) {&#10;            &quot;playful&quot; -&gt; binding.rgPersonality.check(binding.radioPlayful.id)&#10;            &quot;kind&quot; -&gt; binding.rgPersonality.check(binding.radioKind.id)&#10;            &quot;objective&quot; -&gt; binding.rgPersonality.check(binding.radioObjective.id)&#10;            else -&gt; binding.rgPersonality.check(binding.radioKind.id)&#10;        }&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        binding.btnSaveUserSettings.setOnClickListener {&#10;            saveUserSettings()&#10;        }&#10;        binding.btnPickUserIcon.setOnClickListener {&#10;            pickImage()&#10;        }&#10;    }&#10;&#10;    private fun saveUserSettings() {&#10;        val userName = binding.etUserName.text.toString().trim()&#10;        val agentName = binding.etAgentName.text.toString().trim()&#10;        val currentIconUri = selectedIconUri&#10;&#10;        // 空の場合はデフォルト値を使用&#10;        val finalUserName = if (userName.isEmpty()) DEFAULT_USER_NAME else userName&#10;        val finalAgentName = if (agentName.isEmpty()) DEFAULT_AGENT_NAME else agentName&#10;        val selectedPersonality = when (binding.rgPersonality.checkedRadioButtonId) {&#10;            binding.radioPlayful.id -&gt; &quot;playful&quot;&#10;            binding.radioKind.id -&gt; &quot;kind&quot;&#10;            binding.radioObjective.id -&gt; &quot;objective&quot;&#10;            else -&gt; DEFAULT_PERSONALITY&#10;        }&#10;&#10;        // SharedPreferencesに保存&#10;        sharedPreferences.edit()&#10;            .putString(KEY_USER_NAME, finalUserName)&#10;            .putString(KEY_AGENT_NAME, finalAgentName)&#10;            .putString(KEY_PERSONALITY, selectedPersonality)&#10;            .apply {&#10;                if (currentIconUri != null) {&#10;                    putString(KEY_USER_ICON_URI, currentIconUri.toString())&#10;                }&#10;            }&#10;            .apply()&#10;&#10;        // UIを更新&#10;        binding.etUserName.setText(finalUserName)&#10;        binding.etAgentName.setText(finalAgentName)&#10;&#10;        Toast.makeText(context, &quot;設定を保存しました&quot;, Toast.LENGTH_SHORT).show()&#10;        settingsSavedListener?.onSettingsSaved()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;&#10;    // 画像ピッカー&#10;    private var selectedIconUri: Uri? = null&#10;    private val imagePickerLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? -&gt;&#10;        if (uri != null) {&#10;            // 読み込み &amp; 正方形中央クロップ &amp; 円形加工&#10;            val processed = processSelectedImage(uri)&#10;            if (processed != null) {&#10;                // 内部保存してそのUriを保持&#10;                val savedUri = saveBitmapInternal(processed)&#10;                if (savedUri != null) {&#10;                    selectedIconUri = savedUri&#10;                    binding.ivUserIcon.setImageBitmap(processed)&#10;                } else {&#10;                    binding.ivUserIcon.setImageBitmap(processed)&#10;                }&#10;            } else {&#10;                binding.ivUserIcon.setImageURI(uri) // フォールバック&#10;                selectedIconUri = uri&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun processSelectedImage(uri: Uri): Bitmap? {&#10;        return try {&#10;            val input: InputStream? = requireContext().contentResolver.openInputStream(uri)&#10;            val original = BitmapFactory.decodeStream(input) ?: return null&#10;            input?.close()&#10;&#10;            // 正方形中央クロップ&#10;            val size = minOf(original.width, original.height)&#10;            val x = (original.width - size) / 2&#10;            val y = (original.height - size) / 2&#10;            val square = Bitmap.createBitmap(original, x, y, size, size)&#10;&#10;            // 目的サイズ (72dp相当) を端末密度で&#10;            val targetPx = (72 * resources.displayMetrics.density).toInt()&#10;            val scaled = Bitmap.createScaledBitmap(square, targetPx, targetPx, true)&#10;&#10;            // 円形マスク&#10;            val output = Bitmap.createBitmap(targetPx, targetPx, Bitmap.Config.ARGB_8888)&#10;            val canvas = Canvas(output)&#10;            val paint = Paint(Paint.ANTI_ALIAS_FLAG)&#10;            val path = Path()&#10;            path.addOval(RectF(0f, 0f, targetPx.toFloat(), targetPx.toFloat()), Path.Direction.CW)&#10;            canvas.clipPath(path)&#10;            canvas.drawBitmap(scaled, 0f, 0f, paint)&#10;            output&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    private fun saveBitmapInternal(bitmap: Bitmap): Uri? {&#10;        return try {&#10;            val dir = File(requireContext().filesDir, &quot;user_icons&quot;)&#10;            if (!dir.exists()) dir.mkdirs()&#10;            val file = File(dir, &quot;icon.png&quot;)&#10;            FileOutputStream(file).use { out -&gt;&#10;                bitmap.compress(Bitmap.CompressFormat.PNG, 100, out)&#10;            }&#10;            Uri.fromFile(file)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    private fun pickImage() {&#10;        imagePickerLauncher.launch(&quot;image/*&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.voiceapp.ui.settings&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import com.example.voiceapp.databinding.FragmentSettingsBinding&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.graphics.Canvas&#10;import android.graphics.Paint&#10;import android.graphics.Path&#10;import android.graphics.RectF&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;&#10;class SettingsFragment : Fragment() {&#10;&#10;    private var _binding: FragmentSettingsBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var sharedPreferences: SharedPreferences&#10;&#10;    companion object {&#10;        private const val PREFS_NAME = &quot;user_settings&quot;&#10;        private const val KEY_USER_NAME = &quot;user_name&quot;&#10;        private const val KEY_AGENT_NAME = &quot;agent_name&quot;&#10;        private const val KEY_USER_ICON_URI = &quot;user_icon_uri&quot;&#10;        private const val KEY_PERSONALITY = &quot;personality&quot;&#10;&#10;        // デフォルト値&#10;        const val DEFAULT_USER_NAME = &quot;ユーザー&quot;&#10;        const val DEFAULT_AGENT_NAME = &quot;AIアシスタント&quot;&#10;        const val DEFAULT_PERSONALITY = &quot;kind&quot; // playful | kind | objective&#10;&#10;        fun getUserName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_USER_NAME, DEFAULT_USER_NAME) ?: DEFAULT_USER_NAME&#10;        }&#10;&#10;        fun getAgentName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME) ?: DEFAULT_AGENT_NAME&#10;        }&#10;&#10;        fun getUserIconUri(context: Context): Uri? {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            val value = prefs.getString(KEY_USER_ICON_URI, null)&#10;            return value?.let { Uri.parse(it) }&#10;        }&#10;&#10;        fun getPersonality(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_PERSONALITY, DEFAULT_PERSONALITY) ?: DEFAULT_PERSONALITY&#10;        }&#10;    }&#10;&#10;    interface OnSettingsSavedListener {&#10;        fun onSettingsSaved()&#10;    }&#10;    private var settingsSavedListener: OnSettingsSavedListener? = null&#10;&#10;    override fun onAttach(context: Context) {&#10;        super.onAttach(context)&#10;        if (context is OnSettingsSavedListener) {&#10;            settingsSavedListener = context&#10;        }&#10;    }&#10;&#10;    override fun onDetach() {&#10;        super.onDetach()&#10;        settingsSavedListener = null&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentSettingsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        sharedPreferences = requireContext().getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        loadUserSettings()&#10;        setupClickListeners()&#10;    }&#10;&#10;    //    private fun setupUI() {&#10;    //        // APIキーの状態を表示&#10;    //        val apiKey = BuildConfig.OPENAI_API_KEY&#10;    //        if (apiKey.isNotEmpty() &amp;&amp; apiKey != &quot;your_openai_api_key_here&quot;) {&#10;    //            binding.tvApiKeyStatus.text = &quot;APIキー: 設定済み (${apiKey.take(10)}...)&quot;&#10;    //        } else {&#10;    //            binding.tvApiKeyStatus.text = &quot;APIキー: 未設定&quot;&#10;    //        }&#10;    //&#10;    //        // Base URLを表示&#10;    //        binding.tvBaseUrlStatus.text = &quot;Base URL: ${BuildConfig.OPENAI_BASE_URL}&quot;&#10;    //    }&#10;&#10;    private fun loadUserSettings() {&#10;        // 保存された設定を読み込み&#10;        val userName = sharedPreferences.getString(KEY_USER_NAME, DEFAULT_USER_NAME)&#10;        val agentName = sharedPreferences.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME)&#10;        val iconUriString = sharedPreferences.getString(KEY_USER_ICON_URI, null)&#10;        val personality = sharedPreferences.getString(KEY_PERSONALITY, DEFAULT_PERSONALITY)&#10;&#10;        binding.etUserName.setText(userName)&#10;        binding.etAgentName.setText(agentName)&#10;        if (iconUriString != null) {&#10;            val uri = Uri.parse(iconUriString)&#10;            binding.ivUserIcon.setImageURI(uri)&#10;        }&#10;        // 性格ラジオ反映&#10;        when (personality) {&#10;            &quot;playful&quot; -&gt; binding.rgPersonality.check(binding.radioPlayful.id)&#10;            &quot;kind&quot; -&gt; binding.rgPersonality.check(binding.radioKind.id)&#10;            &quot;objective&quot; -&gt; binding.rgPersonality.check(binding.radioObjective.id)&#10;            else -&gt; binding.rgPersonality.check(binding.radioKind.id)&#10;        }&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        binding.btnSaveUserSettings.setOnClickListener {&#10;            saveUserSettings()&#10;        }&#10;        binding.btnPickUserIcon.setOnClickListener {&#10;            pickImage()&#10;        }&#10;        // 性格: 選択変更で即時保存&#10;        binding.rgPersonality.setOnCheckedChangeListener { _, checkedId -&gt;&#10;            val selectedPersonality = when (checkedId) {&#10;                binding.radioPlayful.id -&gt; &quot;playful&quot;&#10;                binding.radioKind.id -&gt; &quot;kind&quot;&#10;                binding.radioObjective.id -&gt; &quot;objective&quot;&#10;                else -&gt; DEFAULT_PERSONALITY&#10;            }&#10;            sharedPreferences.edit().putString(KEY_PERSONALITY, selectedPersonality).apply()&#10;            // 必要に応じてナビゲーションヘッダー等を更新&#10;            settingsSavedListener?.onSettingsSaved()&#10;        }&#10;    }&#10;&#10;    private fun saveUserSettings() {&#10;        val userName = binding.etUserName.text.toString().trim()&#10;        val agentName = binding.etAgentName.text.toString().trim()&#10;        val currentIconUri = selectedIconUri&#10;&#10;        // 空の場合はデフォルト値を使用&#10;        val finalUserName = if (userName.isEmpty()) DEFAULT_USER_NAME else userName&#10;        val finalAgentName = if (agentName.isEmpty()) DEFAULT_AGENT_NAME else agentName&#10;        val selectedPersonality = when (binding.rgPersonality.checkedRadioButtonId) {&#10;            binding.radioPlayful.id -&gt; &quot;playful&quot;&#10;            binding.radioKind.id -&gt; &quot;kind&quot;&#10;            binding.radioObjective.id -&gt; &quot;objective&quot;&#10;            else -&gt; DEFAULT_PERSONALITY&#10;        }&#10;&#10;        // SharedPreferencesに保存&#10;        sharedPreferences.edit()&#10;            .putString(KEY_USER_NAME, finalUserName)&#10;            .putString(KEY_AGENT_NAME, finalAgentName)&#10;            .putString(KEY_PERSONALITY, selectedPersonality)&#10;            .apply {&#10;                if (currentIconUri != null) {&#10;                    putString(KEY_USER_ICON_URI, currentIconUri.toString())&#10;                }&#10;            }&#10;            .apply()&#10;&#10;        // UIを更新&#10;        binding.etUserName.setText(finalUserName)&#10;        binding.etAgentName.setText(finalAgentName)&#10;&#10;        Toast.makeText(context, &quot;設定を保存しました&quot;, Toast.LENGTH_SHORT).show()&#10;        settingsSavedListener?.onSettingsSaved()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;&#10;    // 画像ピッカー&#10;    private var selectedIconUri: Uri? = null&#10;    private val imagePickerLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? -&gt;&#10;        if (uri != null) {&#10;            // 読み込み &amp; 正方形中央クロップ &amp; 円形加工&#10;            val processed = processSelectedImage(uri)&#10;            if (processed != null) {&#10;                // 内部保存してそのUriを保持&#10;                val savedUri = saveBitmapInternal(processed)&#10;                if (savedUri != null) {&#10;                    selectedIconUri = savedUri&#10;                    binding.ivUserIcon.setImageBitmap(processed)&#10;                } else {&#10;                    binding.ivUserIcon.setImageBitmap(processed)&#10;                }&#10;            } else {&#10;                binding.ivUserIcon.setImageURI(uri) // フォールバック&#10;                selectedIconUri = uri&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun processSelectedImage(uri: Uri): Bitmap? {&#10;        return try {&#10;            val input: InputStream? = requireContext().contentResolver.openInputStream(uri)&#10;            val original = BitmapFactory.decodeStream(input) ?: return null&#10;            input?.close()&#10;&#10;            // 正方形中央クロップ&#10;            val size = minOf(original.width, original.height)&#10;            val x = (original.width - size) / 2&#10;            val y = (original.height - size) / 2&#10;            val square = Bitmap.createBitmap(original, x, y, size, size)&#10;&#10;            // 目的サイズ (72dp相当) を端末密度で&#10;            val targetPx = (72 * resources.displayMetrics.density).toInt()&#10;            val scaled = Bitmap.createScaledBitmap(square, targetPx, targetPx, true)&#10;&#10;            // 円形マスク&#10;            val output = Bitmap.createBitmap(targetPx, targetPx, Bitmap.Config.ARGB_8888)&#10;            val canvas = Canvas(output)&#10;            val paint = Paint(Paint.ANTI_ALIAS_FLAG)&#10;            val path = Path()&#10;            path.addOval(RectF(0f, 0f, targetPx.toFloat(), targetPx.toFloat()), Path.Direction.CW)&#10;            canvas.clipPath(path)&#10;            canvas.drawBitmap(scaled, 0f, 0f, paint)&#10;            output&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    private fun saveBitmapInternal(bitmap: Bitmap): Uri? {&#10;        return try {&#10;            val dir = File(requireContext().filesDir, &quot;user_icons&quot;)&#10;            if (!dir.exists()) dir.mkdirs()&#10;            val file = File(dir, &quot;icon.png&quot;)&#10;            FileOutputStream(file).use { out -&gt;&#10;                bitmap.compress(Bitmap.CompressFormat.PNG, 100, out)&#10;            }&#10;            Uri.fromFile(file)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    private fun pickImage() {&#10;        imagePickerLauncher.launch(&quot;image/*&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/badge_error.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/badge_error.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#F44336&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/badge_success.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/badge_success.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#4CAF50&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/badge_warning.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/badge_warning.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#FF9800&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFFFF&quot;&#10;        android:pathData=&quot;M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;    &#10;    &lt;!-- 家の屋根 --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z&quot;/&gt;&#10;        &#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_mic.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_mic.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;        android:pathData=&quot;M12,14c1.66,0 3,-1.34 3,-3L15,5c0,-1.66 -1.34,-3 -3,-3 -1.66,0 -3,1.34 -3,3v6c0,1.66 1.34,3 3,3zM19,11c0,3.31 -2.69,6 -6,6s-6,-2.69 -6,-6L5,11c0,3.53 2.61,6.43 6,6.92L11,21h2v-3.08c3.39,-0.49 6,-3.39 6,-6.92h0z&quot;/&gt;&#10;        android:pathData=&quot;M12,14c1.66,0 3,-1.34 3,-3L15,5c0,-1.66 -1.34,-3 -3,-3 -1.66,0 -3,1.34 -3,3v6c0,1.66 1.34,3 3,3zM19,11c0,3.31 -2.69,6 -6,6s-6,-2.69 -6,-6L5,11c0,3.53 2.61,6.43 6,6.92L11,21h2v-3.08c3.39,-0.49 6,-3.39 6,-6.92h0z&quot;/&gt;&#10;        android:pathData=&quot;M12,14c1.66,0 3,-1.34 3,-3L15,5c0,-1.66 -1.34,-3 -3,-3 -1.66,0 -3,1.34 -3,3v6c0,1.66 1.34,3 3,3zM19,11c0,3.31 -2.69,6 -6,6s-6,-2.69 -6,-6L5,11c0,3.53 2.61,6.43 6,6.92L11,21h2v-3.08c3.39,-0.49 6,-3.39 6,-6.92h0z&quot;/&gt;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;!-- 左右対称に調整したマイクアイコン --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFFFF&quot;&#10;        android:pathData=&quot;M12,14c1.66,0 3,-1.34 3,-3L15,5c0,-1.66 -1.34,-3 -3,-3 -1.66,0 -3,1.34 -3,3v6c0,1.66 1.34,3 3,3zM18,11c0,3.31 -2.69,6 -6,6 -3.31,0 -6,-2.69 -6,-6H5c0,3.53 2.61,6.43 6,6.92V21h2v-3.08c3.39,-0.49 6,-3.39 6,-6.92h-1z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_send.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_send.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFFFF&quot;&#10;        android:pathData=&quot;M2.01,21L23,12 2.01,3 2,10l15,2 -15,2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_settings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;設定&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;        &lt;!-- ユーザー設定セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;ユーザー設定&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;あなたの名前&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/etUserName&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:inputType=&quot;textPersonName&quot;&#10;                        android:maxLines=&quot;1&quot; /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;AIアシスタントの名前&quot;&#10;                    android:id=&quot;@+id/AgentName&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/etAgentName&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:inputType=&quot;textPersonName&quot;&#10;                        android:maxLines=&quot;1&quot; /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;!-- ユーザーアイコン設定 --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivUserIcon&quot;&#10;                        android:layout_width=&quot;72dp&quot;&#10;                        android:layout_height=&quot;72dp&quot;&#10;                        android:src=&quot;@mipmap/ic_launcher_round&quot;&#10;                        android:contentDescription=&quot;ユーザーアイコン&quot;&#10;                        android:scaleType=&quot;centerCrop&quot;&#10;                        android:background=&quot;@drawable/user_icon_background&quot;&#10;                        android:padding=&quot;0dp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot;&#10;                        android:clipToOutline=&quot;true&quot; /&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnPickUserIcon&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;アイコン画像を選択&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnSaveUserSettings&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;保存&quot;&#10;                    android:layout_gravity=&quot;end&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- API設定セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- アプリ情報セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;アプリ情報&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;バージョン: 1.0&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;OpenAI互換API対応チャットアプリ&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;!--        &amp;lt;!&amp;ndash; アクションボタン &amp;ndash;&amp;gt;--&gt;&#10;&lt;!--        &lt;LinearLayout--&gt;&#10;&lt;!--            android:layout_width=&quot;match_parent&quot;--&gt;&#10;&lt;!--            android:layout_height=&quot;wrap_content&quot;--&gt;&#10;&lt;!--            android:orientation=&quot;vertical&quot;--&gt;&#10;&lt;!--            android:layout_marginTop=&quot;16dp&quot;&gt;--&gt;&#10;&#10;&#10;&lt;!--            &lt;com.google.android.material.button.MaterialButton--&gt;&#10;&lt;!--                android:id=&quot;@+id/btnAbout&quot;--&gt;&#10;&lt;!--                android:layout_width=&quot;match_parent&quot;--&gt;&#10;&lt;!--                android:layout_height=&quot;wrap_content&quot;--&gt;&#10;&lt;!--                android:text=&quot;このアプリについて&quot;--&gt;&#10;&lt;!--                style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot; /&gt;--&gt;&#10;&#10;&lt;!--        &lt;/LinearLayout&gt;--&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;設定&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;        &lt;!-- ユーザー設定セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;ユーザー設定&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;あなたの名前&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/etUserName&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:inputType=&quot;textPersonName&quot;&#10;                        android:maxLines=&quot;1&quot; /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;AIアシスタントの名前&quot;&#10;                    android:id=&quot;@+id/AgentName&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/etAgentName&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:inputType=&quot;textPersonName&quot;&#10;                        android:maxLines=&quot;1&quot; /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;!-- ユーザーアイコン設定 --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivUserIcon&quot;&#10;                        android:layout_width=&quot;72dp&quot;&#10;                        android:layout_height=&quot;72dp&quot;&#10;                        android:src=&quot;@mipmap/ic_launcher_round&quot;&#10;                        android:contentDescription=&quot;ユーザーアイコン&quot;&#10;                        android:scaleType=&quot;centerCrop&quot;&#10;                        android:background=&quot;@drawable/user_icon_background&quot;&#10;                        android:padding=&quot;0dp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot;&#10;                        android:clipToOutline=&quot;true&quot; /&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnPickUserIcon&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;アイコン画像を選択&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnSaveUserSettings&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;保存&quot;&#10;                    android:layout_gravity=&quot;end&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- 性格設定セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;性格設定&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;RadioGroup&#10;                    android:id=&quot;@+id/rgPersonality&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                    &lt;RadioButton&#10;                        android:id=&quot;@+id/radioPlayful&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;おちゃめ&quot; /&gt;&#10;&#10;                    &lt;RadioButton&#10;                        android:id=&quot;@+id/radioKind&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;優しい&quot; /&gt;&#10;&#10;                    &lt;RadioButton&#10;                        android:id=&quot;@+id/radioObjective&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;客観的&quot; /&gt;&#10;                &lt;/RadioGroup&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- API設定セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- アプリ情報セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;アプリ情報&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;バージョン: 1.0&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;OpenAI互換API対応チャットアプリ&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!--        &amp;lt;!&amp;ndash; アクションボタン &amp;ndash;&amp;gt;--&gt;&#10;        &lt;!--        &lt;LinearLayout--&gt;&#10;        &lt;!--            android:layout_width=&quot;match_parent&quot;--&gt;&#10;        &lt;!--            android:layout_height=&quot;wrap_content&quot;--&gt;&#10;        &lt;!--            android:orientation=&quot;vertical&quot;--&gt;&#10;        &lt;!--            android:layout_marginTop=&quot;16dp&quot;&gt;--&gt;&#10;&#10;&#10;        &lt;!--            &lt;com.google.android.material.button.MaterialButton--&gt;&#10;        &lt;!--                android:id=&quot;@+id/btnAbout&quot;--&gt;&#10;        &lt;!--                android:layout_width=&quot;match_parent&quot;--&gt;&#10;        &lt;!--                android:layout_height=&quot;wrap_content&quot;--&gt;&#10;        &lt;!--                android:text=&quot;このアプリについて&quot;--&gt;&#10;        &lt;!--                style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot; /&gt;--&gt;&#10;&#10;        &lt;!--        &lt;/LinearLayout&gt;--&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Night theme override --&gt;&#10;    &lt;color name=&quot;chat_icon_tint&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Material3 ベーステーマ (DayNight + DynamicColor 対応) --&gt;&#10;    &lt;style name=&quot;Theme.Voiceapp&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;        &lt;!-- iOSライクなカラーパレット --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/ios_blue&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryContainer&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimaryContainer&quot;&gt;@color/black&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/ios_blue&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondaryContainer&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondaryContainer&quot;&gt;@color/black&lt;/item&gt;&#10;&#10;        &lt;!-- Surfaces / 背景を白・セカンダリグレーに --&gt;&#10;        &lt;item name=&quot;colorSurface&quot;&gt;@color/ios_bg_primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSurface&quot;&gt;@color/ios_label&lt;/item&gt;&#10;        &lt;item name=&quot;colorBackground&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;android:colorBackground&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOutline&quot;&gt;@color/ios_separator&lt;/item&gt;&#10;&#10;        &lt;!-- System bars --&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;@bool/isLightTheme&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLayoutInDisplayCutoutMode&quot;&gt;shortEdges&lt;/item&gt;&#10;&#10;        &lt;!-- Elevation overlay無効（フラットな見た目） --&gt;&#10;        &lt;item name=&quot;elevationOverlayColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;&#10;        &lt;!-- Shape / Typography --&gt;&#10;        &lt;item name=&quot;shapeAppearanceSmallComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Small&lt;/item&gt;&#10;        &lt;item name=&quot;shapeAppearanceMediumComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Medium&lt;/item&gt;&#10;        &lt;item name=&quot;shapeAppearanceLargeComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Large&lt;/item&gt;&#10;        &lt;item name=&quot;fontFamily&quot;&gt;@font/voiceapp_sans&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- 旧 NoActionBar 呼び出し互換 (明示的に残す) --&gt;&#10;    &lt;style name=&quot;Theme.Voiceapp.NoActionBar&quot; parent=&quot;Theme.Voiceapp&quot; /&gt;&#10;&#10;    &lt;style name=&quot;Theme.Voiceapp.AppBarOverlay&quot; parent=&quot;ThemeOverlay.Material3.Dark.ActionBar&quot; /&gt;&#10;&#10;    &lt;style name=&quot;Theme.Voiceapp.PopupOverlay&quot; parent=&quot;ThemeOverlay.Material3.Light&quot; /&gt;&#10;&#10;    &lt;!-- Shapes --&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Small&quot; parent=&quot;ShapeAppearance.Material3.Corner.Full&quot; /&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Medium&quot; parent=&quot;ShapeAppearance.Material3.MediumComponent&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSize&quot;&gt;16dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Large&quot; parent=&quot;ShapeAppearance.Material3.LargeComponent&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSize&quot;&gt;28dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;!-- Material3 ベーステーマ (DayNight + DynamicColor 対応) --&gt;&#10;    &lt;style name=&quot;Theme.Voiceapp&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;        &lt;!-- iOSライクなカラーパレット --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/ios_blue&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryContainer&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimaryContainer&quot;&gt;@color/black&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/ios_blue&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondaryContainer&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondaryContainer&quot;&gt;@color/black&lt;/item&gt;&#10;&#10;        &lt;!-- Surfaces / 背景を白・セカンダリグレーに --&gt;&#10;        &lt;item name=&quot;colorSurface&quot;&gt;@color/ios_bg_primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSurface&quot;&gt;@color/ios_label&lt;/item&gt;&#10;        &lt;item name=&quot;android:colorBackground&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOutline&quot;&gt;@color/ios_separator&lt;/item&gt;&#10;&#10;        &lt;!-- System bars --&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;@bool/isLightTheme&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLayoutInDisplayCutoutMode&quot;&gt;shortEdges&lt;/item&gt;&#10;&#10;        &lt;!-- Elevation overlay無効（フラットな見た目） --&gt;&#10;        &lt;item name=&quot;elevationOverlayColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;&#10;        &lt;!-- Shape / Typography --&gt;&#10;        &lt;item name=&quot;shapeAppearanceSmallComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Small&lt;/item&gt;&#10;        &lt;item name=&quot;shapeAppearanceMediumComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Medium&lt;/item&gt;&#10;        &lt;item name=&quot;shapeAppearanceLargeComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Large&lt;/item&gt;&#10;        &lt;item name=&quot;fontFamily&quot;&gt;@font/voiceapp_sans&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- 旧 NoActionBar 呼び出し互換 (明示的に残す) --&gt;&#10;    &lt;style name=&quot;Theme.Voiceapp.NoActionBar&quot; parent=&quot;Theme.Voiceapp&quot; /&gt;&#10;&#10;    &lt;style name=&quot;Theme.Voiceapp.AppBarOverlay&quot; parent=&quot;ThemeOverlay.Material3.Dark.ActionBar&quot; /&gt;&#10;&#10;    &lt;style name=&quot;Theme.Voiceapp.PopupOverlay&quot; parent=&quot;ThemeOverlay.Material3.Light&quot; /&gt;&#10;&#10;    &lt;!-- Shapes --&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Small&quot; parent=&quot;ShapeAppearance.Material3.Corner.Full&quot; /&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Medium&quot; parent=&quot;ShapeAppearance.Material3.MediumComponent&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSize&quot;&gt;16dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Large&quot; parent=&quot;ShapeAppearance.Material3.LargeComponent&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSize&quot;&gt;28dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>