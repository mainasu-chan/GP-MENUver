<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="import java.util.Properties&#10;&#10;plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.voiceapp&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.voiceapp&quot;&#10;        minSdk = 30&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        // Read properties from local.properties&#10;        val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#10;        val localProperties = Properties()&#10;        if (localPropertiesFile.exists()) {&#10;            localPropertiesFile.inputStream().use { localProperties.load(it) }&#10;        }&#10;&#10;        val openaiApiKey = localProperties.getProperty(&quot;OPENAI_API_KEY&quot;) ?: &quot;&quot;&#10;        val openaiBaseUrl = localProperties.getProperty(&quot;OPENAI_BASE_URL&quot;) ?: &quot;https://api.openai.com/&quot;&#10;&#10;        buildConfigField(&quot;String&quot;, &quot;OPENAI_API_KEY&quot;, &quot;\&quot;$openaiApiKey\&quot;&quot;)&#10;        buildConfigField(&quot;String&quot;, &quot;OPENAI_BASE_URL&quot;, &quot;\&quot;$openaiBaseUrl\&quot;&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;    compileOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;}&#10;&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.androidx.lifecycle.livedata.ktx)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;&#10;    // HTTP client for API communication&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // Coroutines for async operations&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
              <option name="updatedContent" value="import java.util.Properties&#10;&#10;plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.voiceapp&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.voiceapp&quot;&#10;        minSdk = 30&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        // Read properties from local.properties&#10;        val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#10;        val localProperties = Properties()&#10;        if (localPropertiesFile.exists()) {&#10;            localPropertiesFile.inputStream().use { localProperties.load(it) }&#10;        }&#10;&#10;        val openaiApiKey = localProperties.getProperty(&quot;OPENAI_API_KEY&quot;) ?: &quot;&quot;&#10;        val openaiBaseUrl = localProperties.getProperty(&quot;OPENAI_BASE_URL&quot;) ?: &quot;https://api.openai.com/&quot;&#10;&#10;        buildConfigField(&quot;String&quot;, &quot;OPENAI_API_KEY&quot;, &quot;\&quot;$openaiApiKey\&quot;&quot;)&#10;        buildConfigField(&quot;String&quot;, &quot;OPENAI_BASE_URL&quot;, &quot;\&quot;$openaiBaseUrl\&quot;&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = true&#10;            isShrinkResources = true&#10;            // 既存proguard設定維持&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;        // debugビルドでネットワーク検証時のパフォーマンスより可観測性を優先&#10;        debug {&#10;            // 余地: applicationIdSuffix = &quot;.debug&quot; など&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;        buildConfig = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.androidx.lifecycle.livedata.ktx)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;&#10;    // HTTP client for API communication&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // Coroutines for async operations&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:icon=&quot;@mipmap/ic_launcher&quot;&#10;    android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;    android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;            android:theme=&quot;@style/Theme.Voiceapp.NoActionBar&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.VoiceApp&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.Voiceapp&quot;&#13;&#10;        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&#13;&#10;        android:usesCleartextTraffic=&quot;true&quot;&#13;&#10;        android:enableOnBackInvokedCallback=&quot;true&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Voiceapp.NoActionBar&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/chat/ChatViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/chat/ChatViewModel.kt" />
              <option name="originalContent" value="package com.example.voiceapp.ui.chat&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.voiceapp.BuildConfig&#10;import com.example.voiceapp.api.Message&#10;import com.example.voiceapp.api.OpenAIClient&#10;import kotlinx.coroutines.launch&#10;&#10;data class ChatMessage(&#10;    val content: String,&#10;    val isUser: Boolean,&#10;    val timestamp: Long = System.currentTimeMillis()&#10;)&#10;&#10;class ChatViewModel : ViewModel() {&#10;&#10;    private val _messages = MutableLiveData&lt;List&lt;ChatMessage&gt;&gt;()&#10;    val messages: LiveData&lt;List&lt;ChatMessage&gt;&gt; = _messages&#10;&#10;    private val _isLoading = MutableLiveData&lt;Boolean&gt;()&#10;    val isLoading: LiveData&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _error = MutableLiveData&lt;String?&gt;()&#10;    val error: LiveData&lt;String?&gt; = _error&#10;&#10;    private val _isApiKeyConfigured = MutableLiveData&lt;Boolean&gt;()&#10;    val isApiKeyConfigured: LiveData&lt;Boolean&gt; = _isApiKeyConfigured&#10;&#10;    private var openAIClient: OpenAIClient? = null&#10;&#10;    init {&#10;        _messages.value = emptyList()&#10;        _isLoading.value = false&#10;        initializeApiKey()&#10;    }&#10;&#10;    private fun initializeApiKey() {&#10;        val apiKey = BuildConfig.OPENAI_API_KEY&#10;            _error.value = &quot;APIキーが設定されていません&quot;&#10;            openAIClient = OpenAIClient(apiKey)&#10;        }&#10;&#10;        // ユーザーメッセージを追加&#10;        val currentMessages = _messages.value?.toMutableList() ?: mutableListOf()&#10;        currentMessages.add(ChatMessage(userMessage, true))&#10;        _messages.value = currentMessages&#10;&#10;        _isLoading.value = true&#10;        _error.value = null&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                // OpenAI APIに送信するメッセージリストを作成&#10;                val apiMessages = currentMessages.map { chatMessage -&gt;&#10;                    Message(&#10;                        role = if (chatMessage.isUser) &quot;user&quot; else &quot;assistant&quot;,&#10;                        content = chatMessage.content&#10;                    )&#10;                }&#10;&#10;                val result = client.sendMessage(apiMessages)&#10;&#10;                result.fold(&#10;                    onSuccess = { response -&gt;&#10;                        val updatedMessages = _messages.value?.toMutableList() ?: mutableListOf()&#10;                        updatedMessages.add(ChatMessage(response, false))&#10;                        _messages.value = updatedMessages&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = &quot;エラー: ${exception.message}&quot;&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;予期しないエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearChat() {&#10;        _messages.value = emptyList()&#10;        _error.value = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.voiceapp.ui.chat&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.voiceapp.BuildConfig&#10;import com.example.voiceapp.api.Message&#10;import com.example.voiceapp.api.OpenAIClient&#10;import kotlinx.coroutines.launch&#10;&#10;data class ChatMessage(&#10;    val content: String,&#10;    val isUser: Boolean,&#10;    val timestamp: Long = System.currentTimeMillis()&#10;)&#10;&#10;class ChatViewModel : ViewModel() {&#10;&#10;    private val _messages = MutableLiveData&lt;List&lt;ChatMessage&gt;&gt;()&#10;    val messages: LiveData&lt;List&lt;ChatMessage&gt;&gt; = _messages&#10;&#10;    private val _isLoading = MutableLiveData&lt;Boolean&gt;()&#10;    val isLoading: LiveData&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _error = MutableLiveData&lt;String?&gt;()&#10;    val error: LiveData&lt;String?&gt; = _error&#10;&#10;    private val _isApiKeyConfigured = MutableLiveData&lt;Boolean&gt;()&#10;    val isApiKeyConfigured: LiveData&lt;Boolean&gt; = _isApiKeyConfigured&#10;&#10;    private var openAIClient: OpenAIClient? = null&#10;&#10;    init {&#10;        _messages.value = emptyList()&#10;        _isLoading.value = false&#10;        initializeApiKey()&#10;    }&#10;&#10;    private fun initializeApiKey() {&#10;        val apiKey = BuildConfig.OPENAI_API_KEY&#10;        val baseUrl = BuildConfig.OPENAI_BASE_URL&#10;&#10;        if (apiKey.isNotEmpty() &amp;&amp; apiKey != &quot;your_openai_api_key_here&quot;) {&#10;            openAIClient = OpenAIClient(apiKey, baseUrl)&#10;            _isApiKeyConfigured.value = true&#10;        } else {&#10;            _isApiKeyConfigured.value = false&#10;            _error.value = &quot;local.propertiesファイルでOPENAI_API_KEYを設定してください&quot;&#10;        }&#10;    }&#10;&#10;    fun sendMessage(userMessage: String, systemPrompt: String? = null) {&#10;        if (userMessage.isBlank()) return&#10;&#10;        val client = openAIClient&#10;        if (client == null) {&#10;            _error.value = &quot;APIキーが設定されていません&quot;&#10;            return&#10;        }&#10;&#10;        // ユーザーメッセージを追加&#10;        val currentMessages = _messages.value?.toMutableList() ?: mutableListOf()&#10;        currentMessages.add(ChatMessage(userMessage, true))&#10;        _messages.value = currentMessages&#10;&#10;        _isLoading.value = true&#10;        _error.value = null&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                // OpenAI APIに送信するメッセージリストを作成&#10;                val apiMessages = mutableListOf&lt;Message&gt;()&#10;                if (!systemPrompt.isNullOrBlank()) {&#10;                    apiMessages.add(Message(role = &quot;system&quot;, content = systemPrompt))&#10;                }&#10;                apiMessages.addAll(currentMessages.map { chatMessage -&gt;&#10;                    Message(&#10;                        role = if (chatMessage.isUser) &quot;user&quot; else &quot;assistant&quot;,&#10;                        content = chatMessage.content&#10;                    )&#10;                })&#10;&#10;                val result = client.sendMessage(apiMessages)&#10;&#10;                result.fold(&#10;                    onSuccess = { response -&gt;&#10;                        val updatedMessages = _messages.value?.toMutableList() ?: mutableListOf()&#10;                        updatedMessages.add(ChatMessage(response, false))&#10;                        _messages.value = updatedMessages&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = &quot;エラー: ${exception.message}&quot;&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;予期しないエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearChat() {&#10;        _messages.value = emptyList()&#10;        _error.value = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/settings/SettingsFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/settings/SettingsFragment.kt" />
              <option name="originalContent" value="package com.example.voiceapp.ui.settings&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import com.example.voiceapp.databinding.FragmentSettingsBinding&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.graphics.Canvas&#10;import android.graphics.Paint&#10;import android.graphics.Path&#10;import android.graphics.RectF&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;&#10;class SettingsFragment : Fragment() {&#10;&#10;    private var _binding: FragmentSettingsBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var sharedPreferences: SharedPreferences&#10;&#10;    companion object {&#10;        private const val PREFS_NAME = &quot;user_settings&quot;&#10;        private const val KEY_USER_NAME = &quot;user_name&quot;&#10;        private const val KEY_AGENT_NAME = &quot;agent_name&quot;&#10;        private const val KEY_USER_ICON_URI = &quot;user_icon_uri&quot;&#10;        private const val KEY_PERSONALITY = &quot;personality&quot;&#10;&#10;        // デフォルト値&#10;        const val DEFAULT_USER_NAME = &quot;ユーザー&quot;&#10;        const val DEFAULT_AGENT_NAME = &quot;AIアシスタント&quot;&#10;        const val DEFAULT_PERSONALITY = &quot;kind&quot; // playful | kind | objective&#10;&#10;        fun getUserName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_USER_NAME, DEFAULT_USER_NAME) ?: DEFAULT_USER_NAME&#10;        }&#10;&#10;        fun getAgentName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME) ?: DEFAULT_AGENT_NAME&#10;        }&#10;&#10;        fun getUserIconUri(context: Context): Uri? {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            val value = prefs.getString(KEY_USER_ICON_URI, null)&#10;            return value?.let { Uri.parse(it) }&#10;        }&#10;&#10;        fun getPersonality(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_PERSONALITY, DEFAULT_PERSONALITY) ?: DEFAULT_PERSONALITY&#10;        }&#10;    }&#10;&#10;    interface OnSettingsSavedListener {&#10;        fun onSettingsSaved()&#10;    }&#10;    private var settingsSavedListener: OnSettingsSavedListener? = null&#10;&#10;    override fun onAttach(context: Context) {&#10;        super.onAttach(context)&#10;        if (context is OnSettingsSavedListener) {&#10;            settingsSavedListener = context&#10;        }&#10;    }&#10;&#10;    override fun onDetach() {&#10;        super.onDetach()&#10;        settingsSavedListener = null&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentSettingsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        sharedPreferences = requireContext().getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        loadUserSettings()&#10;        setupClickListeners()&#10;    }&#10;&#10;    //    private fun setupUI() {&#10;    //        // APIキーの状態を表示&#10;    //        val apiKey = BuildConfig.OPENAI_API_KEY&#10;    //        if (apiKey.isNotEmpty() &amp;&amp; apiKey != &quot;your_openai_api_key_here&quot;) {&#10;    //            binding.tvApiKeyStatus.text = &quot;APIキー: 設定済み (${apiKey.take(10)}...)&quot;&#10;    //        } else {&#10;    //            binding.tvApiKeyStatus.text = &quot;APIキー: 未設定&quot;&#10;    //        }&#10;    //&#10;    //        // Base URLを表示&#10;    //        binding.tvBaseUrlStatus.text = &quot;Base URL: ${BuildConfig.OPENAI_BASE_URL}&quot;&#10;    //    }&#10;&#10;    private fun loadUserSettings() {&#10;        // 保存された設定を読み込み&#10;        val userName = sharedPreferences.getString(KEY_USER_NAME, DEFAULT_USER_NAME)&#10;        val agentName = sharedPreferences.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME)&#10;        val iconUriString = sharedPreferences.getString(KEY_USER_ICON_URI, null)&#10;        val personality = sharedPreferences.getString(KEY_PERSONALITY, DEFAULT_PERSONALITY)&#10;&#10;        binding.etUserName.setText(userName)&#10;        binding.etAgentName.setText(agentName)&#10;        if (iconUriString != null) {&#10;            val uri = Uri.parse(iconUriString)&#10;            binding.ivUserIcon.setImageURI(uri)&#10;        }&#10;        // 性格ラジオ反映&#10;        when (personality) {&#10;            &quot;playful&quot; -&gt; binding.rgPersonality.check(binding.radioPlayful.id)&#10;            &quot;kind&quot; -&gt; binding.rgPersonality.check(binding.radioKind.id)&#10;            &quot;objective&quot; -&gt; binding.rgPersonality.check(binding.radioObjective.id)&#10;            else -&gt; binding.rgPersonality.check(binding.radioKind.id)&#10;        }&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        binding.btnSaveUserSettings.setOnClickListener {&#10;            saveUserSettings()&#10;        }&#10;        binding.btnPickUserIcon.setOnClickListener {&#10;            pickImage()&#10;        }&#10;    }&#10;&#10;    private fun saveUserSettings() {&#10;        val userName = binding.etUserName.text.toString().trim()&#10;        val agentName = binding.etAgentName.text.toString().trim()&#10;        val currentIconUri = selectedIconUri&#10;&#10;        // 空の場合はデフォルト値を使用&#10;        val finalUserName = if (userName.isEmpty()) DEFAULT_USER_NAME else userName&#10;        val finalAgentName = if (agentName.isEmpty()) DEFAULT_AGENT_NAME else agentName&#10;        val selectedPersonality = when (binding.rgPersonality.checkedRadioButtonId) {&#10;            binding.radioPlayful.id -&gt; &quot;playful&quot;&#10;            binding.radioKind.id -&gt; &quot;kind&quot;&#10;            binding.radioObjective.id -&gt; &quot;objective&quot;&#10;            else -&gt; DEFAULT_PERSONALITY&#10;        }&#10;&#10;        // SharedPreferencesに保存&#10;        sharedPreferences.edit()&#10;            .putString(KEY_USER_NAME, finalUserName)&#10;            .putString(KEY_AGENT_NAME, finalAgentName)&#10;            .putString(KEY_PERSONALITY, selectedPersonality)&#10;            .apply {&#10;                if (currentIconUri != null) {&#10;                    putString(KEY_USER_ICON_URI, currentIconUri.toString())&#10;                }&#10;            }&#10;            .apply()&#10;&#10;        // UIを更新&#10;        binding.etUserName.setText(finalUserName)&#10;        binding.etAgentName.setText(finalAgentName)&#10;&#10;        Toast.makeText(context, &quot;設定を保存しました&quot;, Toast.LENGTH_SHORT).show()&#10;        settingsSavedListener?.onSettingsSaved()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;&#10;    // 画像ピッカー&#10;    private var selectedIconUri: Uri? = null&#10;    private val imagePickerLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? -&gt;&#10;        if (uri != null) {&#10;            // 読み込み &amp; 正方形中央クロップ &amp; 円形加工&#10;            val processed = processSelectedImage(uri)&#10;            if (processed != null) {&#10;                // 内部保存してそのUriを保持&#10;                val savedUri = saveBitmapInternal(processed)&#10;                if (savedUri != null) {&#10;                    selectedIconUri = savedUri&#10;                    binding.ivUserIcon.setImageBitmap(processed)&#10;                } else {&#10;                    binding.ivUserIcon.setImageBitmap(processed)&#10;                }&#10;            } else {&#10;                binding.ivUserIcon.setImageURI(uri) // フォールバック&#10;                selectedIconUri = uri&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun processSelectedImage(uri: Uri): Bitmap? {&#10;        return try {&#10;            val input: InputStream? = requireContext().contentResolver.openInputStream(uri)&#10;            val original = BitmapFactory.decodeStream(input) ?: return null&#10;            input?.close()&#10;&#10;            // 正方形中央クロップ&#10;            val size = minOf(original.width, original.height)&#10;            val x = (original.width - size) / 2&#10;            val y = (original.height - size) / 2&#10;            val square = Bitmap.createBitmap(original, x, y, size, size)&#10;&#10;            // 目的サイズ (72dp相当) を端末密度で&#10;            val targetPx = (72 * resources.displayMetrics.density).toInt()&#10;            val scaled = Bitmap.createScaledBitmap(square, targetPx, targetPx, true)&#10;&#10;            // 円形マスク&#10;            val output = Bitmap.createBitmap(targetPx, targetPx, Bitmap.Config.ARGB_8888)&#10;            val canvas = Canvas(output)&#10;            val paint = Paint(Paint.ANTI_ALIAS_FLAG)&#10;            val path = Path()&#10;            path.addOval(RectF(0f, 0f, targetPx.toFloat(), targetPx.toFloat()), Path.Direction.CW)&#10;            canvas.clipPath(path)&#10;            canvas.drawBitmap(scaled, 0f, 0f, paint)&#10;            output&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    private fun saveBitmapInternal(bitmap: Bitmap): Uri? {&#10;        return try {&#10;            val dir = File(requireContext().filesDir, &quot;user_icons&quot;)&#10;            if (!dir.exists()) dir.mkdirs()&#10;            val file = File(dir, &quot;icon.png&quot;)&#10;            FileOutputStream(file).use { out -&gt;&#10;                bitmap.compress(Bitmap.CompressFormat.PNG, 100, out)&#10;            }&#10;            Uri.fromFile(file)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    private fun pickImage() {&#10;        imagePickerLauncher.launch(&quot;image/*&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.voiceapp.ui.settings&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import com.example.voiceapp.databinding.FragmentSettingsBinding&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.graphics.Canvas&#10;import android.graphics.Paint&#10;import android.graphics.Path&#10;import android.graphics.RectF&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;&#10;class SettingsFragment : Fragment() {&#10;&#10;    private var _binding: FragmentSettingsBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var sharedPreferences: SharedPreferences&#10;&#10;    companion object {&#10;        private const val PREFS_NAME = &quot;user_settings&quot;&#10;        private const val KEY_USER_NAME = &quot;user_name&quot;&#10;        private const val KEY_AGENT_NAME = &quot;agent_name&quot;&#10;        private const val KEY_USER_ICON_URI = &quot;user_icon_uri&quot;&#10;        private const val KEY_PERSONALITY = &quot;personality&quot;&#10;&#10;        // デフォルト値&#10;        const val DEFAULT_USER_NAME = &quot;ユーザー&quot;&#10;        const val DEFAULT_AGENT_NAME = &quot;AIアシスタント&quot;&#10;        const val DEFAULT_PERSONALITY = &quot;kind&quot; // playful | kind | objective&#10;&#10;        fun getUserName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_USER_NAME, DEFAULT_USER_NAME) ?: DEFAULT_USER_NAME&#10;        }&#10;&#10;        fun getAgentName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME) ?: DEFAULT_AGENT_NAME&#10;        }&#10;&#10;        fun getUserIconUri(context: Context): Uri? {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            val value = prefs.getString(KEY_USER_ICON_URI, null)&#10;            return value?.let { Uri.parse(it) }&#10;        }&#10;&#10;        fun getPersonality(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_PERSONALITY, DEFAULT_PERSONALITY) ?: DEFAULT_PERSONALITY&#10;        }&#10;    }&#10;&#10;    interface OnSettingsSavedListener {&#10;        fun onSettingsSaved()&#10;    }&#10;    private var settingsSavedListener: OnSettingsSavedListener? = null&#10;&#10;    override fun onAttach(context: Context) {&#10;        super.onAttach(context)&#10;        if (context is OnSettingsSavedListener) {&#10;            settingsSavedListener = context&#10;        }&#10;    }&#10;&#10;    override fun onDetach() {&#10;        super.onDetach()&#10;        settingsSavedListener = null&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentSettingsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        sharedPreferences = requireContext().getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        loadUserSettings()&#10;        setupClickListeners()&#10;    }&#10;&#10;    //    private fun setupUI() {&#10;    //        // APIキーの状態を表示&#10;    //        val apiKey = BuildConfig.OPENAI_API_KEY&#10;    //        if (apiKey.isNotEmpty() &amp;&amp; apiKey != &quot;your_openai_api_key_here&quot;) {&#10;    //            binding.tvApiKeyStatus.text = &quot;APIキー: 設定済み (${apiKey.take(10)}...)&quot;&#10;    //        } else {&#10;    //            binding.tvApiKeyStatus.text = &quot;APIキー: 未設定&quot;&#10;    //        }&#10;    //&#10;    //        // Base URLを表示&#10;    //        binding.tvBaseUrlStatus.text = &quot;Base URL: ${BuildConfig.OPENAI_BASE_URL}&quot;&#10;    //    }&#10;&#10;    private fun loadUserSettings() {&#10;        // 保存された設定を読み込み&#10;        val userName = sharedPreferences.getString(KEY_USER_NAME, DEFAULT_USER_NAME)&#10;        val agentName = sharedPreferences.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME)&#10;        val iconUriString = sharedPreferences.getString(KEY_USER_ICON_URI, null)&#10;        val personality = sharedPreferences.getString(KEY_PERSONALITY, DEFAULT_PERSONALITY)&#10;&#10;        binding.etUserName.setText(userName)&#10;        binding.etAgentName.setText(agentName)&#10;        if (iconUriString != null) {&#10;            val uri = Uri.parse(iconUriString)&#10;            binding.ivUserIcon.setImageURI(uri)&#10;        }&#10;        // 性格ラジオ反映&#10;        when (personality) {&#10;            &quot;playful&quot; -&gt; binding.rgPersonality.check(binding.radioPlayful.id)&#10;            &quot;kind&quot; -&gt; binding.rgPersonality.check(binding.radioKind.id)&#10;            &quot;objective&quot; -&gt; binding.rgPersonality.check(binding.radioObjective.id)&#10;            else -&gt; binding.rgPersonality.check(binding.radioKind.id)&#10;        }&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        binding.btnSaveUserSettings.setOnClickListener {&#10;            saveUserSettings()&#10;        }&#10;        binding.btnPickUserIcon.setOnClickListener {&#10;            pickImage()&#10;        }&#10;        // 性格: 選択変更で即時保存&#10;        binding.rgPersonality.setOnCheckedChangeListener { _, checkedId -&gt;&#10;            val selectedPersonality = when (checkedId) {&#10;                binding.radioPlayful.id -&gt; &quot;playful&quot;&#10;                binding.radioKind.id -&gt; &quot;kind&quot;&#10;                binding.radioObjective.id -&gt; &quot;objective&quot;&#10;                else -&gt; DEFAULT_PERSONALITY&#10;            }&#10;            sharedPreferences.edit().putString(KEY_PERSONALITY, selectedPersonality).apply()&#10;            // 必要に応じてナビゲーションヘッダー等を更新&#10;            settingsSavedListener?.onSettingsSaved()&#10;        }&#10;    }&#10;&#10;    private fun saveUserSettings() {&#10;        val userName = binding.etUserName.text.toString().trim()&#10;        val agentName = binding.etAgentName.text.toString().trim()&#10;        val currentIconUri = selectedIconUri&#10;&#10;        // 空の場合はデフォルト値を使用&#10;        val finalUserName = if (userName.isEmpty()) DEFAULT_USER_NAME else userName&#10;        val finalAgentName = if (agentName.isEmpty()) DEFAULT_AGENT_NAME else agentName&#10;        val selectedPersonality = when (binding.rgPersonality.checkedRadioButtonId) {&#10;            binding.radioPlayful.id -&gt; &quot;playful&quot;&#10;            binding.radioKind.id -&gt; &quot;kind&quot;&#10;            binding.radioObjective.id -&gt; &quot;objective&quot;&#10;            else -&gt; DEFAULT_PERSONALITY&#10;        }&#10;&#10;        // SharedPreferencesに保存&#10;        sharedPreferences.edit()&#10;            .putString(KEY_USER_NAME, finalUserName)&#10;            .putString(KEY_AGENT_NAME, finalAgentName)&#10;            .putString(KEY_PERSONALITY, selectedPersonality)&#10;            .apply {&#10;                if (currentIconUri != null) {&#10;                    putString(KEY_USER_ICON_URI, currentIconUri.toString())&#10;                }&#10;            }&#10;            .apply()&#10;&#10;        // UIを更新&#10;        binding.etUserName.setText(finalUserName)&#10;        binding.etAgentName.setText(finalAgentName)&#10;&#10;        Toast.makeText(context, &quot;設定を保存しました&quot;, Toast.LENGTH_SHORT).show()&#10;        settingsSavedListener?.onSettingsSaved()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;&#10;    // 画像ピッカー&#10;    private var selectedIconUri: Uri? = null&#10;    private val imagePickerLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? -&gt;&#10;        if (uri != null) {&#10;            // 読み込み &amp; 正方形中央クロップ &amp; 円形加工&#10;            val processed = processSelectedImage(uri)&#10;            if (processed != null) {&#10;                // 内部保存してそのUriを保持&#10;                val savedUri = saveBitmapInternal(processed)&#10;                if (savedUri != null) {&#10;                    selectedIconUri = savedUri&#10;                    binding.ivUserIcon.setImageBitmap(processed)&#10;                } else {&#10;                    binding.ivUserIcon.setImageBitmap(processed)&#10;                }&#10;            } else {&#10;                binding.ivUserIcon.setImageURI(uri) // フォールバック&#10;                selectedIconUri = uri&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun processSelectedImage(uri: Uri): Bitmap? {&#10;        return try {&#10;            val input: InputStream? = requireContext().contentResolver.openInputStream(uri)&#10;            val original = BitmapFactory.decodeStream(input) ?: return null&#10;            input?.close()&#10;&#10;            // 正方形中央クロップ&#10;            val size = minOf(original.width, original.height)&#10;            val x = (original.width - size) / 2&#10;            val y = (original.height - size) / 2&#10;            val square = Bitmap.createBitmap(original, x, y, size, size)&#10;&#10;            // 目的サイズ (72dp相当) を端末密度で&#10;            val targetPx = (72 * resources.displayMetrics.density).toInt()&#10;            val scaled = Bitmap.createScaledBitmap(square, targetPx, targetPx, true)&#10;&#10;            // 円形マスク&#10;            val output = Bitmap.createBitmap(targetPx, targetPx, Bitmap.Config.ARGB_8888)&#10;            val canvas = Canvas(output)&#10;            val paint = Paint(Paint.ANTI_ALIAS_FLAG)&#10;            val path = Path()&#10;            path.addOval(RectF(0f, 0f, targetPx.toFloat(), targetPx.toFloat()), Path.Direction.CW)&#10;            canvas.clipPath(path)&#10;            canvas.drawBitmap(scaled, 0f, 0f, paint)&#10;            output&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    private fun saveBitmapInternal(bitmap: Bitmap): Uri? {&#10;        return try {&#10;            val dir = File(requireContext().filesDir, &quot;user_icons&quot;)&#10;            if (!dir.exists()) dir.mkdirs()&#10;            val file = File(dir, &quot;icon.png&quot;)&#10;            FileOutputStream(file).use { out -&gt;&#10;                bitmap.compress(Bitmap.CompressFormat.PNG, 100, out)&#10;            }&#10;            Uri.fromFile(file)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    private fun pickImage() {&#10;        imagePickerLauncher.launch(&quot;image/*&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/badge_error.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/badge_error.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#F44336&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/badge_success.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/badge_success.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#4CAF50&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/badge_warning.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/badge_warning.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#FF9800&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFFFF&quot;&#10;        android:pathData=&quot;M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;    &#10;    &lt;!-- 家の屋根 --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z&quot;/&gt;&#10;        &#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_mic.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_mic.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;        android:pathData=&quot;M12,14c1.66,0 3,-1.34 3,-3L15,5c0,-1.66 -1.34,-3 -3,-3 -1.66,0 -3,1.34 -3,3v6c0,1.66 1.34,3 3,3zM19,11c0,3.31 -2.69,6 -6,6s-6,-2.69 -6,-6L5,11c0,3.53 2.61,6.43 6,6.92L11,21h2v-3.08c3.39,-0.49 6,-3.39 6,-6.92h0z&quot;/&gt;&#10;        android:pathData=&quot;M12,14c1.66,0 3,-1.34 3,-3L15,5c0,-1.66 -1.34,-3 -3,-3 -1.66,0 -3,1.34 -3,3v6c0,1.66 1.34,3 3,3zM19,11c0,3.31 -2.69,6 -6,6s-6,-2.69 -6,-6L5,11c0,3.53 2.61,6.43 6,6.92L11,21h2v-3.08c3.39,-0.49 6,-3.39 6,-6.92h0z&quot;/&gt;&#10;        android:pathData=&quot;M12,14c1.66,0 3,-1.34 3,-3L15,5c0,-1.66 -1.34,-3 -3,-3 -1.66,0 -3,1.34 -3,3v6c0,1.66 1.34,3 3,3zM19,11c0,3.31 -2.69,6 -6,6s-6,-2.69 -6,-6L5,11c0,3.53 2.61,6.43 6,6.92L11,21h2v-3.08c3.39,-0.49 6,-3.39 6,-6.92h0z&quot;/&gt;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;!-- 左右対称に調整したマイクアイコン --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFFFF&quot;&#10;        android:pathData=&quot;M12,14c1.66,0 3,-1.34 3,-3L15,5c0,-1.66 -1.34,-3 -3,-3 -1.66,0 -3,1.34 -3,3v6c0,1.66 1.34,3 3,3zM18,11c0,3.31 -2.69,6 -6,6 -3.31,0 -6,-2.69 -6,-6H5c0,3.53 2.61,6.43 6,6.92V21h2v-3.08c3.39,-0.49 6,-3.39 6,-6.92h-1z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_send.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_send.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFFFF&quot;&#10;        android:pathData=&quot;M2.01,21L23,12 2.01,3 2,10l15,2 -15,2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_chat.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_chat.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:padding=&quot;12dp&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvMessages&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:paddingBottom=&quot;8dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/messageInputContainer&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/messageInputContainer&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:paddingVertical=&quot;4dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:id=&quot;@+id/tilMessage&quot;&#10;            style=&quot;@style/Widget.Material3.TextInputLayout.FilledBox.Dense&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;@string/chat_hint_message&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/etMessage&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:maxLines=&quot;4&quot;&#10;                android:imeOptions=&quot;actionSend&quot;&#10;                android:inputType=&quot;textCapSentences|textMultiLine&quot; /&gt;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;end&quot;&#10;            android:layout_marginTop=&quot;6dp&quot;&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnClear&quot;&#10;                style=&quot;@style/Widget.Voiceapp.ChatButton.Clear&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#10;                android:contentDescription=&quot;@string/chat_clear&quot;&#10;                app:icon=&quot;@drawable/ic_delete&quot;&#10;                app:iconGravity=&quot;textStart&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnMic&quot;&#10;                style=&quot;@style/Widget.Voiceapp.ChatButton.Mic&quot;&#10;                android:layout_width=&quot;56dp&quot;&#10;                android:layout_height=&quot;56dp&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#10;                android:contentDescription=&quot;@string/chat_mic&quot;&#10;                app:icon=&quot;@drawable/ic_mic&quot;&#10;                app:iconGravity=&quot;textStart&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnSend&quot;&#10;                style=&quot;@style/Widget.Voiceapp.ChatButton.Send&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;56dp&quot;&#10;                android:minHeight=&quot;56dp&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:paddingStart=&quot;24dp&quot;&#10;                android:paddingEnd=&quot;28dp&quot;&#10;                android:text=&quot;@string/chat_send&quot;&#10;                app:icon=&quot;@drawable/ic_send&quot;&#10;                app:iconGravity=&quot;textStart&quot;&#10;                app:iconPadding=&quot;8dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.progressindicator.CircularProgressIndicator&#10;        android:id=&quot;@+id/progressBar&quot;&#10;        style=&quot;@style/Widget.Material3.CircularProgressIndicator&quot;&#10;        android:layout_width=&quot;40dp&quot;&#10;        android:layout_height=&quot;40dp&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvError&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:padding=&quot;4dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/messageInputContainer&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:padding=&quot;12dp&quot;&#13;&#10;    android:background=&quot;@color/ios_bg_secondary&quot;&gt;&#13;&#10;&#13;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#13;&#10;        android:id=&quot;@+id/rvMessages&quot;&#13;&#10;        android:layout_width=&quot;0dp&quot;&#13;&#10;        android:layout_height=&quot;0dp&quot;&#13;&#10;        android:clipToPadding=&quot;false&quot;&#13;&#10;        android:paddingBottom=&quot;8dp&quot;&#13;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#13;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/messageInputContainer&quot;&#13;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:id=&quot;@+id/messageInputContainer&quot;&#13;&#10;        android:layout_width=&quot;0dp&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&#13;&#10;        android:paddingVertical=&quot;4dp&quot;&#13;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#13;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#13;&#10;&#13;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#13;&#10;            android:id=&quot;@+id/tilMessage&quot;&#13;&#10;            style=&quot;@style/Widget.Material3.TextInputLayout.FilledBox.Dense&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:hint=&quot;@string/chat_hint_message&quot;&#13;&#10;            app:boxBackgroundColor=&quot;@color/ios_bg_primary&quot;&#13;&#10;            app:boxStrokeColor=&quot;@color/ios_separator&quot;&#13;&#10;            app:boxStrokeWidth=&quot;1dp&quot;&#13;&#10;            app:boxStrokeWidthFocused=&quot;1dp&quot;&#13;&#10;            app:boxCornerRadiusTopStart=&quot;18dp&quot;&#13;&#10;            app:boxCornerRadiusTopEnd=&quot;18dp&quot;&#13;&#10;            app:boxCornerRadiusBottomStart=&quot;18dp&quot;&#13;&#10;            app:boxCornerRadiusBottomEnd=&quot;18dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#13;&#10;                android:id=&quot;@+id/etMessage&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:maxLines=&quot;4&quot;&#13;&#10;                android:imeOptions=&quot;actionSend&quot;&#13;&#10;                android:inputType=&quot;textCapSentences|textMultiLine&quot;&#13;&#10;                android:textColor=&quot;@color/ios_label&quot;&#13;&#10;                android:textColorHint=&quot;@color/ios_secondary_label&quot; /&gt;&#13;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#13;&#10;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;horizontal&quot;&#13;&#10;            android:gravity=&quot;end&quot;&#13;&#10;            android:layout_marginTop=&quot;6dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;com.google.android.material.button.MaterialButton&#13;&#10;                android:id=&quot;@+id/btnClear&quot;&#13;&#10;                style=&quot;@style/Widget.Voiceapp.ChatButton.Clear&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#13;&#10;                android:contentDescription=&quot;@string/chat_clear&quot;&#13;&#10;                app:icon=&quot;@drawable/ic_delete&quot;&#13;&#10;                app:iconGravity=&quot;textStart&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;com.google.android.material.button.MaterialButton&#13;&#10;                android:id=&quot;@+id/btnMic&quot;&#13;&#10;                style=&quot;@style/Widget.Voiceapp.ChatButton.Mic&quot;&#13;&#10;                android:layout_width=&quot;56dp&quot;&#13;&#10;                android:layout_height=&quot;56dp&quot;&#13;&#10;                android:layout_marginStart=&quot;8dp&quot;&#13;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#13;&#10;                android:contentDescription=&quot;@string/chat_mic&quot;&#13;&#10;                app:icon=&quot;@drawable/ic_mic&quot;&#13;&#10;                app:iconGravity=&quot;textStart&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;com.google.android.material.button.MaterialButton&#13;&#10;                android:id=&quot;@+id/btnSend&quot;&#13;&#10;                style=&quot;@style/Widget.Voiceapp.ChatButton.Send&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;56dp&quot;&#13;&#10;                android:minHeight=&quot;56dp&quot;&#13;&#10;                android:layout_marginStart=&quot;8dp&quot;&#13;&#10;                android:paddingStart=&quot;24dp&quot;&#13;&#10;                android:paddingEnd=&quot;28dp&quot;&#13;&#10;                android:text=&quot;@string/chat_send&quot;&#13;&#10;                app:icon=&quot;@drawable/ic_send&quot;&#13;&#10;                app:iconGravity=&quot;textStart&quot;&#13;&#10;                app:iconPadding=&quot;8dp&quot; /&gt;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;com.google.android.material.progressindicator.CircularProgressIndicator&#13;&#10;        android:id=&quot;@+id/progressBar&quot;&#13;&#10;        style=&quot;@style/Widget.Material3.CircularProgressIndicator&quot;&#13;&#10;        android:layout_width=&quot;40dp&quot;&#13;&#10;        android:layout_height=&quot;40dp&quot;&#13;&#10;        android:visibility=&quot;gone&quot;&#13;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#13;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#13;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;TextView&#13;&#10;        android:id=&quot;@+id/tvError&quot;&#13;&#10;        android:layout_width=&quot;0dp&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:textColor=&quot;@android:color/holo_red_dark&quot;&#13;&#10;        android:visibility=&quot;gone&quot;&#13;&#10;        android:padding=&quot;4dp&quot;&#13;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/messageInputContainer&quot;&#13;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#13;&#10;&#13;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_settings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;設定&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;        &lt;!-- ユーザー設定セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;ユーザー設定&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;あなたの名前&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/etUserName&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:inputType=&quot;textPersonName&quot;&#10;                        android:maxLines=&quot;1&quot; /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;AIアシスタントの名前&quot;&#10;                    android:id=&quot;@+id/AgentName&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/etAgentName&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:inputType=&quot;textPersonName&quot;&#10;                        android:maxLines=&quot;1&quot; /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;!-- ユーザーアイコン設定 --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivUserIcon&quot;&#10;                        android:layout_width=&quot;72dp&quot;&#10;                        android:layout_height=&quot;72dp&quot;&#10;                        android:src=&quot;@mipmap/ic_launcher_round&quot;&#10;                        android:contentDescription=&quot;ユーザーアイコン&quot;&#10;                        android:scaleType=&quot;centerCrop&quot;&#10;                        android:background=&quot;@drawable/user_icon_background&quot;&#10;                        android:padding=&quot;0dp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot;&#10;                        android:clipToOutline=&quot;true&quot; /&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnPickUserIcon&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;アイコン画像を選択&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnSaveUserSettings&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;保存&quot;&#10;                    android:layout_gravity=&quot;end&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- API設定セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- アプリ情報セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;アプリ情報&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;バージョン: 1.0&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;OpenAI互換API対応チャットアプリ&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;!--        &amp;lt;!&amp;ndash; アクションボタン &amp;ndash;&amp;gt;--&gt;&#10;&lt;!--        &lt;LinearLayout--&gt;&#10;&lt;!--            android:layout_width=&quot;match_parent&quot;--&gt;&#10;&lt;!--            android:layout_height=&quot;wrap_content&quot;--&gt;&#10;&lt;!--            android:orientation=&quot;vertical&quot;--&gt;&#10;&lt;!--            android:layout_marginTop=&quot;16dp&quot;&gt;--&gt;&#10;&#10;&#10;&lt;!--            &lt;com.google.android.material.button.MaterialButton--&gt;&#10;&lt;!--                android:id=&quot;@+id/btnAbout&quot;--&gt;&#10;&lt;!--                android:layout_width=&quot;match_parent&quot;--&gt;&#10;&lt;!--                android:layout_height=&quot;wrap_content&quot;--&gt;&#10;&lt;!--                android:text=&quot;このアプリについて&quot;--&gt;&#10;&lt;!--                style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot; /&gt;--&gt;&#10;&#10;&lt;!--        &lt;/LinearLayout&gt;--&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;設定&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;        &lt;!-- ユーザー設定セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;ユーザー設定&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;あなたの名前&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/etUserName&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:inputType=&quot;textPersonName&quot;&#10;                        android:maxLines=&quot;1&quot; /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;AIアシスタントの名前&quot;&#10;                    android:id=&quot;@+id/AgentName&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/etAgentName&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:inputType=&quot;textPersonName&quot;&#10;                        android:maxLines=&quot;1&quot; /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;!-- ユーザーアイコン設定 --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivUserIcon&quot;&#10;                        android:layout_width=&quot;72dp&quot;&#10;                        android:layout_height=&quot;72dp&quot;&#10;                        android:src=&quot;@mipmap/ic_launcher_round&quot;&#10;                        android:contentDescription=&quot;ユーザーアイコン&quot;&#10;                        android:scaleType=&quot;centerCrop&quot;&#10;                        android:background=&quot;@drawable/user_icon_background&quot;&#10;                        android:padding=&quot;0dp&quot;&#10;                        android:layout_marginEnd=&quot;16dp&quot;&#10;                        android:clipToOutline=&quot;true&quot; /&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnPickUserIcon&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;アイコン画像を選択&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnSaveUserSettings&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;保存&quot;&#10;                    android:layout_gravity=&quot;end&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- 性格設定セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;性格設定&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;RadioGroup&#10;                    android:id=&quot;@+id/rgPersonality&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                    &lt;RadioButton&#10;                        android:id=&quot;@+id/radioPlayful&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;おちゃめ&quot; /&gt;&#10;&#10;                    &lt;RadioButton&#10;                        android:id=&quot;@+id/radioKind&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;優しい&quot; /&gt;&#10;&#10;                    &lt;RadioButton&#10;                        android:id=&quot;@+id/radioObjective&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;客観的&quot; /&gt;&#10;                &lt;/RadioGroup&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- API設定セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- アプリ情報セクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;アプリ情報&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;バージョン: 1.0&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;OpenAI互換API対応チャットアプリ&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!--        &amp;lt;!&amp;ndash; アクションボタン &amp;ndash;&amp;gt;--&gt;&#10;        &lt;!--        &lt;LinearLayout--&gt;&#10;        &lt;!--            android:layout_width=&quot;match_parent&quot;--&gt;&#10;        &lt;!--            android:layout_height=&quot;wrap_content&quot;--&gt;&#10;        &lt;!--            android:orientation=&quot;vertical&quot;--&gt;&#10;        &lt;!--            android:layout_marginTop=&quot;16dp&quot;&gt;--&gt;&#10;&#10;&#10;        &lt;!--            &lt;com.google.android.material.button.MaterialButton--&gt;&#10;        &lt;!--                android:id=&quot;@+id/btnAbout&quot;--&gt;&#10;        &lt;!--                android:layout_width=&quot;match_parent&quot;--&gt;&#10;        &lt;!--                android:layout_height=&quot;wrap_content&quot;--&gt;&#10;        &lt;!--                android:text=&quot;このアプリについて&quot;--&gt;&#10;        &lt;!--                style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot; /&gt;--&gt;&#10;&#10;        &lt;!--        &lt;/LinearLayout&gt;--&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_chat_message.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_chat_message.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginVertical=&quot;2dp&quot;&#10;    android:paddingHorizontal=&quot;4dp&quot;&gt;&#10;&#10;    &lt;!-- User (outgoing) bubble: 右寄せ・ブルー --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardUserMessage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:cardElevation=&quot;0dp&quot;&#10;        app:shapeAppearance=&quot;@style/ShapeAppearance.Voiceapp.Bubble.Outgoing&quot;&#10;        app:cardBackgroundColor=&quot;@color/chat_outgoing_bg&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;10dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvUserMessage&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textColor=&quot;@color/chat_outgoing_text&quot;&#10;                android:textSize=&quot;15sp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvUserTimestamp&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:textSize=&quot;10sp&quot;&#10;                android:textColor=&quot;#B3FFFFFF&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- AI (incoming) bubble: 左寄せ・ライトグレー --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardAiMessage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:cardElevation=&quot;0dp&quot;&#10;        app:shapeAppearance=&quot;@style/ShapeAppearance.Voiceapp.Bubble.Incoming&quot;&#10;        app:cardBackgroundColor=&quot;@color/chat_incoming_bg&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;10dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvAiMessage&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textColor=&quot;@color/chat_incoming_text&quot;&#10;                android:textSize=&quot;15sp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvAiTimestamp&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:textSize=&quot;10sp&quot;&#10;                android:textColor=&quot;@color/ios_secondary_label&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginVertical=&quot;2dp&quot;&#10;    android:paddingHorizontal=&quot;4dp&quot;&gt;&#10;&#10;    &lt;!-- User (outgoing) bubble: 右寄せ・ブルー --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardUserMessage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:cardElevation=&quot;0dp&quot;&#10;        app:shapeAppearance=&quot;@style/ShapeAppearance.Voiceapp.Bubble.Outgoing&quot;&#10;        app:cardBackgroundColor=&quot;@color/chat_outgoing_bg&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;10dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvUserMessage&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textColor=&quot;@color/chat_outgoing_text&quot;&#10;                android:textSize=&quot;15sp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvUserTimestamp&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:textSize=&quot;11sp&quot;&#10;                android:textColor=&quot;#B3FFFFFF&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- AI (incoming) bubble: 左寄せ・ライトグレー --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardAiMessage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:cardElevation=&quot;0dp&quot;&#10;        app:shapeAppearance=&quot;@style/ShapeAppearance.Voiceapp.Bubble.Incoming&quot;&#10;        app:cardBackgroundColor=&quot;@color/chat_incoming_bg&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;10dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvAiMessage&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textColor=&quot;@color/chat_incoming_text&quot;&#10;                android:textSize=&quot;15sp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvAiTimestamp&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:textSize=&quot;11sp&quot;&#10;                android:textColor=&quot;@color/ios_secondary_label&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Night theme override --&gt;&#10;    &lt;color name=&quot;chat_icon_tint&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;purple_200&quot;&gt;#FFBB86FC&lt;/color&gt;&#10;    &lt;color name=&quot;purple_500&quot;&gt;#FF6200EE&lt;/color&gt;&#10;    &lt;color name=&quot;purple_700&quot;&gt;#FF3700B3&lt;/color&gt;&#10;    &lt;color name=&quot;teal_200&quot;&gt;#FF03DAC5&lt;/color&gt;&#10;    &lt;color name=&quot;teal_700&quot;&gt;#FF018786&lt;/color&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_icon_tint&quot;&gt;#5A5A5A&lt;/color&gt;&#10;&#10;    &lt;!-- Added for improved button visibility --&gt;&#10;    &lt;color name=&quot;chat_clear_stroke&quot;&gt;#D32F2F&lt;/color&gt;&#10;    &lt;color name=&quot;chat_clear_bg&quot;&gt;#D32F2F&lt;/color&gt;&#10;    &lt;color name=&quot;chat_clear_icon&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_mic_container&quot;&gt;#FF018786&lt;/color&gt;&#10;    &lt;color name=&quot;chat_mic_icon&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_send_container&quot;&gt;#2962FF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_send_container_pressed&quot;&gt;#0039CB&lt;/color&gt;&#10;    &lt;color name=&quot;chat_ripple&quot;&gt;#33FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_send_bg&quot;&gt;#2962FF&lt;/color&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- 既存 --&gt;&#10;    &lt;color name=&quot;purple_200&quot;&gt;#FFBB86FC&lt;/color&gt;&#10;    &lt;color name=&quot;purple_500&quot;&gt;#FF6200EE&lt;/color&gt;&#10;    &lt;color name=&quot;purple_700&quot;&gt;#FF3700B3&lt;/color&gt;&#10;    &lt;color name=&quot;teal_200&quot;&gt;#FF03DAC5&lt;/color&gt;&#10;    &lt;color name=&quot;teal_700&quot;&gt;#FF018786&lt;/color&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_icon_tint&quot;&gt;#5A5A5A&lt;/color&gt;&#10;&#10;    &lt;!-- 既存(チャットUI) - iOS風に調整 --&gt;&#10;    &lt;color name=&quot;chat_clear_stroke&quot;&gt;#00000000&lt;/color&gt;&#10;    &lt;color name=&quot;chat_clear_bg&quot;&gt;#00000000&lt;/color&gt;&#10;    &lt;color name=&quot;chat_clear_icon&quot;&gt;#FF3B30&lt;/color&gt;&#10;    &lt;color name=&quot;chat_mic_container&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_mic_icon&quot;&gt;#0A84FF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_send_container&quot;&gt;#0A84FF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_send_container_pressed&quot;&gt;#0060DF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_ripple&quot;&gt;#330A84FF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_send_bg&quot;&gt;#0A84FF&lt;/color&gt;&#10;&#10;    &lt;!-- 追加: Apple(HIG)を意識した色 --&gt;&#10;    &lt;color name=&quot;ios_blue&quot;&gt;#0A84FF&lt;/color&gt;&#10;    &lt;color name=&quot;ios_blue_pressed&quot;&gt;#0060DF&lt;/color&gt;&#10;    &lt;color name=&quot;ios_destructive&quot;&gt;#FF3B30&lt;/color&gt;&#10;    &lt;color name=&quot;ios_bg_primary&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;ios_bg_secondary&quot;&gt;#F2F2F7&lt;/color&gt;&#10;    &lt;color name=&quot;ios_separator&quot;&gt;#C6C6C8&lt;/color&gt;&#10;    &lt;color name=&quot;ios_label&quot;&gt;#000000&lt;/color&gt;&#10;    &lt;color name=&quot;ios_secondary_label&quot;&gt;#8E8E93&lt;/color&gt;&#10;    &lt;color name=&quot;ios_ripple&quot;&gt;#1F0A84FF&lt;/color&gt;&#10;&#10;    &lt;!-- 追加: チャットバブル色（iMessage風） --&gt;&#10;    &lt;color name=&quot;chat_outgoing_bg&quot;&gt;#0A84FF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_outgoing_text&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;chat_incoming_bg&quot;&gt;#E9E9EB&lt;/color&gt;&#10;    &lt;color name=&quot;chat_incoming_text&quot;&gt;#000000&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;voiceapp&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;nav_header_title&quot;&gt;Android Studio&lt;/string&gt;&#10;    &lt;string name=&quot;nav_header_subtitle&quot;&gt;android.studio@android.com&lt;/string&gt;&#10;    &lt;string name=&quot;nav_header_desc&quot;&gt;Navigation header&lt;/string&gt;&#10;    &lt;string name=&quot;action_settings&quot;&gt;設定&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;menu_home&quot;&gt;ホーム&lt;/string&gt;&#10;    &lt;string name=&quot;menu_gallery&quot;&gt;Gallery&lt;/string&gt;&#10;    &lt;string name=&quot;menu_slideshow&quot;&gt;Slideshow&lt;/string&gt;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;voiceapp&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;nav_header_title&quot;&gt;Android Studio&lt;/string&gt;&#10;    &lt;string name=&quot;nav_header_subtitle&quot;&gt;android.studio@android.com&lt;/string&gt;&#10;    &lt;string name=&quot;nav_header_desc&quot;&gt;Navigation header&lt;/string&gt;&#10;    &lt;string name=&quot;action_settings&quot;&gt;設定&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;menu_home&quot;&gt;ホーム&lt;/string&gt;&#10;    &lt;string name=&quot;menu_gallery&quot;&gt;Gallery&lt;/string&gt;&#10;    &lt;string name=&quot;menu_slideshow&quot;&gt;Slideshow&lt;/string&gt;&#10;&#10;    &lt;!-- 追加 --&gt;&#10;    &lt;string name=&quot;chat_hint_message&quot;&gt;メッセージを入力&lt;/string&gt;&#10;    &lt;string name=&quot;chat_clear&quot;&gt;全消去&lt;/string&gt;&#10;    &lt;string name=&quot;chat_mic&quot;&gt;音声入力&lt;/string&gt;&#10;    &lt;string name=&quot;chat_send&quot;&gt;送信&lt;/string&gt;&#10;    &lt;string name=&quot;chat_cleared&quot;&gt;チャットをクリアしました&lt;/string&gt;&#10;    &lt;string name=&quot;chat_clear_confirm_title&quot;&gt;全消去&lt;/string&gt;&#10;    &lt;string name=&quot;chat_clear_confirm_message&quot;&gt;すべてのメッセージを削除しますか？&lt;/string&gt;&#10;    &lt;string name=&quot;chat_clear_confirm_positive&quot;&gt;削除&lt;/string&gt;&#10;    &lt;string name=&quot;chat_clear_confirm_negative&quot;&gt;キャンセル&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/styles.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/styles.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;style name=&quot;Widget.Voiceapp.Card&quot; parent=&quot;Widget.Material3.CardView.Elevated&quot;&gt;&#10;        &lt;item name=&quot;cardCornerRadius&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cardUseCompatPadding&quot;&gt;true&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.Voiceapp.PrimaryButton&quot; parent=&quot;Widget.Material3.Button&quot;&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;48dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:insetLeft&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:insetRight&quot;&gt;0dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.Voiceapp.OutlinedButton&quot; parent=&quot;Widget.Material3.Button.OutlinedButton&quot;&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;48dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- 追加: チャット用ボタンスタイル --&gt;&#10;    &lt;style name=&quot;Widget.Voiceapp.ChatButton.IconBase&quot; parent=&quot;Widget.Material3.Button.Icon&quot;&gt;&#10;        &lt;item name=&quot;android:insetLeft&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:insetRight&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:insetTop&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:insetBottom&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:padding&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;iconPadding&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;iconSize&quot;&gt;28dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:minWidth&quot;&gt;56dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;56dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.Voiceapp.ChatButton.Clear&quot; parent=&quot;Widget.Voiceapp.ChatButton.IconBase&quot;&gt;&#10;        &lt;item name=&quot;backgroundTint&quot;&gt;@color/chat_clear_bg&lt;/item&gt;&#10;        &lt;item name=&quot;strokeColor&quot;&gt;@color/chat_clear_stroke&lt;/item&gt;&#10;        &lt;item name=&quot;strokeWidth&quot;&gt;1dp&lt;/item&gt;&#10;        &lt;item name=&quot;iconTint&quot;&gt;@color/chat_clear_icon&lt;/item&gt;&#10;        &lt;item name=&quot;android:tooltipText&quot;&gt;@string/chat_clear&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.Voiceapp.ChatButton.Mic&quot; parent=&quot;Widget.Voiceapp.ChatButton.IconBase&quot;&gt;&#10;        &lt;item name=&quot;backgroundTint&quot;&gt;@color/chat_mic_container&lt;/item&gt;&#10;        &lt;item name=&quot;iconTint&quot;&gt;@color/chat_mic_icon&lt;/item&gt;&#10;        &lt;item name=&quot;android:tooltipText&quot;&gt;@string/chat_mic&lt;/item&gt;&#10;        &lt;!-- 追加: 押下時デザイン変化を抑制 --&gt;&#10;        &lt;item name=&quot;rippleColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:stateListAnimator&quot;&gt;@null&lt;/item&gt;&#10;        &lt;item name=&quot;android:foreground&quot;&gt;@null&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.Voiceapp.ChatButton.Send&quot; parent=&quot;Widget.Material3.Button&quot;&gt;&#10;        &lt;item name=&quot;backgroundTint&quot;&gt;@color/chat_send_bg&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@android:color/white&lt;/item&gt;&#10;        &lt;item name=&quot;iconTint&quot;&gt;@android:color/white&lt;/item&gt;&#10;        &lt;item name=&quot;rippleColor&quot;&gt;@color/chat_ripple&lt;/item&gt;&#10;        &lt;item name=&quot;android:tooltipText&quot;&gt;@string/chat_send&lt;/item&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;56dp&lt;/item&gt;&#10;        &lt;!-- 追加: アイコンサイズとテキスト横余白最適化 --&gt;&#10;        &lt;item name=&quot;iconSize&quot;&gt;20dp&lt;/item&gt;&#10;        &lt;item name=&quot;iconPadding&quot;&gt;4dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Chat bubble shapes (iMessage-like) --&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Bubble.Base&quot; parent=&quot;ShapeAppearance.Material3.MediumComponent&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSize&quot;&gt;18dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Bubble.Outgoing&quot; parent=&quot;ShapeAppearance.Voiceapp.Bubble.Base&quot;&gt;&#10;        &lt;item name=&quot;cornerSizeBottomEnd&quot;&gt;4dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Bubble.Incoming&quot; parent=&quot;ShapeAppearance.Voiceapp.Bubble.Base&quot;&gt;&#10;        &lt;item name=&quot;cornerSizeBottomStart&quot;&gt;4dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;style name=&quot;Widget.Voiceapp.Card&quot; parent=&quot;Widget.Material3.CardView.Elevated&quot;&gt;&#10;        &lt;item name=&quot;cardCornerRadius&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cardUseCompatPadding&quot;&gt;true&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.Voiceapp.PrimaryButton&quot; parent=&quot;Widget.Material3.Button&quot;&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;48dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:insetLeft&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:insetRight&quot;&gt;0dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.Voiceapp.OutlinedButton&quot; parent=&quot;Widget.Material3.Button.OutlinedButton&quot;&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;48dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- 追加: チャット用ボタンスタイル --&gt;&#10;    &lt;style name=&quot;Widget.Voiceapp.ChatButton.IconBase&quot; parent=&quot;Widget.Material3.Button.Icon&quot;&gt;&#10;        &lt;item name=&quot;android:insetLeft&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:insetRight&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:insetTop&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:insetBottom&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:padding&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;iconPadding&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;iconSize&quot;&gt;28dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:minWidth&quot;&gt;56dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;56dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.Voiceapp.ChatButton.Clear&quot; parent=&quot;Widget.Voiceapp.ChatButton.IconBase&quot;&gt;&#10;        &lt;item name=&quot;backgroundTint&quot;&gt;@color/chat_clear_bg&lt;/item&gt;&#10;        &lt;item name=&quot;strokeColor&quot;&gt;@color/chat_clear_stroke&lt;/item&gt;&#10;        &lt;item name=&quot;strokeWidth&quot;&gt;1dp&lt;/item&gt;&#10;        &lt;item name=&quot;iconTint&quot;&gt;@color/chat_clear_icon&lt;/item&gt;&#10;        &lt;item name=&quot;android:tooltipText&quot;&gt;@string/chat_clear&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.Voiceapp.ChatButton.Mic&quot; parent=&quot;Widget.Voiceapp.ChatButton.IconBase&quot;&gt;&#10;        &lt;item name=&quot;backgroundTint&quot;&gt;@color/chat_mic_container&lt;/item&gt;&#10;        &lt;item name=&quot;iconTint&quot;&gt;@color/chat_mic_icon&lt;/item&gt;&#10;        &lt;item name=&quot;android:tooltipText&quot;&gt;@string/chat_mic&lt;/item&gt;&#10;        &lt;!-- 追加: 押下時デザイン変化を抑制 --&gt;&#10;        &lt;item name=&quot;rippleColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:stateListAnimator&quot;&gt;@null&lt;/item&gt;&#10;        &lt;item name=&quot;android:foreground&quot;&gt;@null&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;Widget.Voiceapp.ChatButton.Send&quot; parent=&quot;Widget.Material3.Button&quot;&gt;&#10;        &lt;item name=&quot;backgroundTint&quot;&gt;@color/chat_send_bg&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@android:color/white&lt;/item&gt;&#10;        &lt;item name=&quot;iconTint&quot;&gt;@android:color/white&lt;/item&gt;&#10;        &lt;item name=&quot;rippleColor&quot;&gt;@color/chat_ripple&lt;/item&gt;&#10;        &lt;item name=&quot;android:tooltipText&quot;&gt;@string/chat_send&lt;/item&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;56dp&lt;/item&gt;&#10;        &lt;!-- 追加: アイコンサイズとテキスト横余白最適化 --&gt;&#10;        &lt;item name=&quot;iconSize&quot;&gt;20dp&lt;/item&gt;&#10;        &lt;item name=&quot;iconPadding&quot;&gt;4dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Chat bubble shapes (iMessage-like) --&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Bubble.Base&quot; parent=&quot;ShapeAppearance.Material3.MediumComponent&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSize&quot;&gt;18dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Bubble.Outgoing&quot; parent=&quot;ShapeAppearance.Voiceapp.Bubble.Base&quot;&gt;&#10;        &lt;!-- start/end をサポートしない環境向けに right/left を使用 --&gt;&#10;        &lt;item name=&quot;cornerSizeBottomRight&quot;&gt;4dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Bubble.Incoming&quot; parent=&quot;ShapeAppearance.Voiceapp.Bubble.Base&quot;&gt;&#10;        &lt;item name=&quot;cornerSizeBottomLeft&quot;&gt;4dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Material3 ベーステーマ (DayNight + DynamicColor 対応) --&gt;&#10;    &lt;style name=&quot;Theme.Voiceapp&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;        &lt;!-- iOSライクなカラーパレット --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/ios_blue&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryContainer&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimaryContainer&quot;&gt;@color/black&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/ios_blue&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondaryContainer&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondaryContainer&quot;&gt;@color/black&lt;/item&gt;&#10;&#10;        &lt;!-- Surfaces / 背景を白・セカンダリグレーに --&gt;&#10;        &lt;item name=&quot;colorSurface&quot;&gt;@color/ios_bg_primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSurface&quot;&gt;@color/ios_label&lt;/item&gt;&#10;        &lt;item name=&quot;colorBackground&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;android:colorBackground&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOutline&quot;&gt;@color/ios_separator&lt;/item&gt;&#10;&#10;        &lt;!-- System bars --&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;@bool/isLightTheme&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLayoutInDisplayCutoutMode&quot;&gt;shortEdges&lt;/item&gt;&#10;&#10;        &lt;!-- Elevation overlay無効（フラットな見た目） --&gt;&#10;        &lt;item name=&quot;elevationOverlayColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;&#10;        &lt;!-- Shape / Typography --&gt;&#10;        &lt;item name=&quot;shapeAppearanceSmallComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Small&lt;/item&gt;&#10;        &lt;item name=&quot;shapeAppearanceMediumComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Medium&lt;/item&gt;&#10;        &lt;item name=&quot;shapeAppearanceLargeComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Large&lt;/item&gt;&#10;        &lt;item name=&quot;fontFamily&quot;&gt;@font/voiceapp_sans&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- 旧 NoActionBar 呼び出し互換 (明示的に残す) --&gt;&#10;    &lt;style name=&quot;Theme.Voiceapp.NoActionBar&quot; parent=&quot;Theme.Voiceapp&quot; /&gt;&#10;&#10;    &lt;style name=&quot;Theme.Voiceapp.AppBarOverlay&quot; parent=&quot;ThemeOverlay.Material3.Dark.ActionBar&quot; /&gt;&#10;&#10;    &lt;style name=&quot;Theme.Voiceapp.PopupOverlay&quot; parent=&quot;ThemeOverlay.Material3.Light&quot; /&gt;&#10;&#10;    &lt;!-- Shapes --&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Small&quot; parent=&quot;ShapeAppearance.Material3.Corner.Full&quot; /&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Medium&quot; parent=&quot;ShapeAppearance.Material3.MediumComponent&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSize&quot;&gt;16dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Large&quot; parent=&quot;ShapeAppearance.Material3.LargeComponent&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSize&quot;&gt;28dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;!-- Material3 ベーステーマ (DayNight + DynamicColor 対応) --&gt;&#10;    &lt;style name=&quot;Theme.Voiceapp&quot; parent=&quot;Theme.Material3.DayNight.NoActionBar&quot;&gt;&#10;        &lt;!-- iOSライクなカラーパレット --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/ios_blue&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryContainer&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimaryContainer&quot;&gt;@color/black&lt;/item&gt;&#10;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/ios_blue&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondary&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondaryContainer&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondaryContainer&quot;&gt;@color/black&lt;/item&gt;&#10;&#10;        &lt;!-- Surfaces / 背景を白・セカンダリグレーに --&gt;&#10;        &lt;item name=&quot;colorSurface&quot;&gt;@color/ios_bg_primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSurface&quot;&gt;@color/ios_label&lt;/item&gt;&#10;        &lt;item name=&quot;android:colorBackground&quot;&gt;@color/ios_bg_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;colorOutline&quot;&gt;@color/ios_separator&lt;/item&gt;&#10;&#10;        &lt;!-- System bars --&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;@bool/isLightTheme&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLayoutInDisplayCutoutMode&quot;&gt;shortEdges&lt;/item&gt;&#10;&#10;        &lt;!-- Elevation overlay無効（フラットな見た目） --&gt;&#10;        &lt;item name=&quot;elevationOverlayColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;&#10;        &lt;!-- Shape / Typography --&gt;&#10;        &lt;item name=&quot;shapeAppearanceSmallComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Small&lt;/item&gt;&#10;        &lt;item name=&quot;shapeAppearanceMediumComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Medium&lt;/item&gt;&#10;        &lt;item name=&quot;shapeAppearanceLargeComponent&quot;&gt;@style/ShapeAppearance.Voiceapp.Large&lt;/item&gt;&#10;        &lt;item name=&quot;fontFamily&quot;&gt;@font/voiceapp_sans&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- 旧 NoActionBar 呼び出し互換 (明示的に残す) --&gt;&#10;    &lt;style name=&quot;Theme.Voiceapp.NoActionBar&quot; parent=&quot;Theme.Voiceapp&quot; /&gt;&#10;&#10;    &lt;style name=&quot;Theme.Voiceapp.AppBarOverlay&quot; parent=&quot;ThemeOverlay.Material3.Dark.ActionBar&quot; /&gt;&#10;&#10;    &lt;style name=&quot;Theme.Voiceapp.PopupOverlay&quot; parent=&quot;ThemeOverlay.Material3.Light&quot; /&gt;&#10;&#10;    &lt;!-- Shapes --&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Small&quot; parent=&quot;ShapeAppearance.Material3.Corner.Full&quot; /&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Medium&quot; parent=&quot;ShapeAppearance.Material3.MediumComponent&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSize&quot;&gt;16dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ShapeAppearance.Voiceapp.Large&quot; parent=&quot;ShapeAppearance.Material3.LargeComponent&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSize&quot;&gt;28dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>