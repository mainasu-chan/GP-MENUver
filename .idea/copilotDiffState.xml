<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Voiceapp&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.Voiceapp.NoActionBar&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.Voiceapp&quot;&#13;&#10;        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&#13;&#10;        android:usesCleartextTraffic=&quot;true&quot;&#13;&#10;        android:enableOnBackInvokedCallback=&quot;true&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Voiceapp.NoActionBar&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/MainActivity.kt" />
              <option name="originalContent" value="package com.example.voiceapp&#10;&#10;import android.os.Bundle&#10;import android.view.Menu&#10;import android.view.View&#10;import android.widget.TextView&#10;import com.google.android.material.snackbar.Snackbar&#10;import com.google.android.material.navigation.NavigationView&#10;import androidx.navigation.findNavController&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.navigateUp&#10;import androidx.navigation.ui.setupActionBarWithNavController&#10;import androidx.navigation.ui.setupWithNavController&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.voiceapp.databinding.ActivityMainBinding&#10;import com.example.voiceapp.ui.settings.SettingsFragment&#10;import android.widget.LinearLayout&#10;&#10;class MainActivity : AppCompatActivity(), com.example.voiceapp.ui.settings.SettingsFragment.OnSettingsSavedListener {&#10;&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        setSupportActionBar(binding.appBarMain.toolbar)&#10;&#10;//        binding.appBarMain.fab.setOnClickListener { view -&gt;&#10;//            Snackbar.make(view, &quot;Replace with your own action&quot;, Snackbar.LENGTH_LONG)&#10;//                .setAction(&quot;Action&quot;, null)&#10;//                .setAnchorView(R.id.fab).show()&#10;//        }&#10;        val drawerLayout: DrawerLayout = binding.drawerLayout&#10;        val navView: NavigationView = binding.navView&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        // Passing each menu ID as a set of Ids because each&#10;        // menu should be considered as top level destinations.&#10;        appBarConfiguration = AppBarConfiguration(&#10;            setOf(&#10;                R.id.nav_home, R.id.nav_chat, R.id.nav_gallery, R.id.nav_slideshow&#10;            ), drawerLayout&#10;        )&#10;        setupActionBarWithNavController(navController, appBarConfiguration)&#10;        navView.setupWithNavController(navController)&#10;&#10;        // ナビゲーションの遷移リスナーを追加してメニュー選択状態を正しく管理&#10;        navController.addOnDestinationChangedListener { _, destination, _ -&gt;&#10;            // 現在の画面に応じてメニューの選択状態を更新&#10;            when (destination.id) {&#10;                R.id.nav_home -&gt; {&#10;                    navView.setCheckedItem(R.id.nav_home)&#10;                }&#10;                R.id.nav_chat -&gt; {&#10;                    navView.setCheckedItem(R.id.nav_chat)&#10;                }&#10;                R.id.nav_gallery -&gt; {&#10;                    navView.setCheckedItem(R.id.nav_gallery)&#10;                }&#10;                R.id.nav_slideshow -&gt; {&#10;                    navView.setCheckedItem(R.id.nav_slideshow)&#10;                }&#10;                R.id.action_settings -&gt; {&#10;                    // 設定画面では何も選択しない&#10;                    navView.setCheckedItem(View.NO_ID)&#10;                }&#10;            }&#10;            updateNavHeader()&#10;        }&#10;&#10;        // 初期状態でhomeを選択状態にする&#10;        navView.setCheckedItem(R.id.nav_home)&#10;        updateNavHeader()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateNavHeader()&#10;    }&#10;&#10;    private fun updateNavHeader() {&#10;        val navView: NavigationView = binding.navView&#10;        val headerView = navView.getHeaderView(0)&#10;        val userName = SettingsFragment.getUserName(this)&#10;        val agentName = SettingsFragment.getAgentName(this)&#10;&#10;        // ナビゲーションヘッダーのクリック機能を修正&#10;        val headerContainer = headerView.findViewById&lt;LinearLayout&gt;(R.id.nav_header_container)&#10;        headerContainer?.setOnClickListener {&#10;            val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;            // home画面がBackStack上に無い場合も含めて必ずhomeへ遷移&#10;            if (!navController.popBackStack(R.id.nav_home, false)) {&#10;                navController.navigate(R.id.nav_home)&#10;            }&#10;            binding.drawerLayout.closeDrawers() // ドロワーを閉じる&#10;        }&#10;&#10;        // id指定ではなく2番目のTextViewを取得&#10;        val titleTextView = headerView.findViewById&lt;TextView&gt;(R.id.nav_header_title)&#10;            ?: headerView.findViewById&lt;TextView&gt;(android.R.id.text1)&#10;            ?: headerView.findViewById&lt;TextView&gt;(headerView.resources.getIdentifier(&quot;nav_header_title&quot;, &quot;id&quot;, packageName))&#10;            ?: headerView.findViewById&lt;TextView&gt;(headerView.resources.getIdentifier(&quot;title&quot;, &quot;id&quot;, packageName))&#10;            ?: headerView.findViewById&lt;TextView&gt;(headerView.resources.getIdentifier(&quot;textView&quot;, &quot;id&quot;, packageName))&#10;            ?: (headerView as? LinearLayout)?.getChildAt(1) as? TextView&#10;        titleTextView?.text = &quot;$userName さん&quot;&#10;&#10;        // nav_chatメニュータイトルを動的に変更&#10;        val menu = navView.menu&#10;        val chatMenuItem = menu.findItem(R.id.nav_chat)&#10;        chatMenuItem?.title = &quot;$agentName と会話&quot;&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu): Boolean {&#10;        // Inflate the menu; this adds items to the action bar if it is present.&#10;        menuInflater.inflate(R.menu.main, menu)&#10;        return true&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: android.view.MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            R.id.action_settings -&gt; {&#10;                val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;                navController.navigate(R.id.action_settings)&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()&#10;    }&#10;&#10;    override fun onSettingsSaved() {&#10;        updateNavHeader()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.voiceapp&#10;&#10;import android.os.Bundle&#10;import android.view.Menu&#10;import android.view.View&#10;import android.widget.TextView&#10;import com.google.android.material.snackbar.Snackbar&#10;import com.google.android.material.navigation.NavigationView&#10;import androidx.navigation.findNavController&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.navigateUp&#10;import androidx.navigation.ui.setupActionBarWithNavController&#10;import androidx.navigation.ui.setupWithNavController&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.voiceapp.databinding.ActivityMainBinding&#10;import com.example.voiceapp.ui.settings.SettingsFragment&#10;import android.widget.LinearLayout&#10;&#10;class MainActivity : AppCompatActivity(), com.example.voiceapp.ui.settings.SettingsFragment.OnSettingsSavedListener {&#10;&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        setSupportActionBar(binding.appBarMain.toolbar)&#10;&#10;//        binding.appBarMain.fab.setOnClickListener { view -&gt;&#10;//            Snackbar.make(view, &quot;Replace with your own action&quot;, Snackbar.LENGTH_LONG)&#10;//                .setAction(&quot;Action&quot;, null)&#10;//                .setAnchorView(R.id.fab).show()&#10;//        }&#10;        val drawerLayout: DrawerLayout = binding.drawerLayout&#10;        val navView: NavigationView = binding.navView&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        // Passing each menu ID as a set of Ids because each&#10;        // menu should be considered as top level destinations.&#10;        appBarConfiguration = AppBarConfiguration(&#10;            setOf(&#10;                R.id.nav_home, R.id.nav_chat, R.id.nav_gallery, R.id.nav_slideshow&#10;            ), drawerLayout&#10;        )&#10;        setupActionBarWithNavController(navController, appBarConfiguration)&#10;        navView.setupWithNavController(navController)&#10;&#10;        // ナビゲーションの遷移リスナーを追加してメニュー選択状態を正しく管理&#10;        navController.addOnDestinationChangedListener { _, destination, _ -&gt;&#10;            // 現在の画面に応じてメニューの選択状態を更新&#10;            when (destination.id) {&#10;                R.id.nav_home -&gt; {&#10;                    navView.setCheckedItem(R.id.nav_home)&#10;                }&#10;                R.id.nav_chat -&gt; {&#10;                    navView.setCheckedItem(R.id.nav_chat)&#10;                }&#10;                R.id.nav_gallery -&gt; {&#10;                    navView.setCheckedItem(R.id.nav_gallery)&#10;                }&#10;                R.id.nav_slideshow -&gt; {&#10;                    navView.setCheckedItem(R.id.nav_slideshow)&#10;                }&#10;                R.id.action_settings -&gt; {&#10;                    // 設定画面では何も選択しない&#10;                    navView.setCheckedItem(View.NO_ID)&#10;                }&#10;            }&#10;            updateNavHeader()&#10;        }&#10;&#10;        // ナビゲーションメニューのクリックリスナーを追加&#10;        navView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_home -&gt; {&#10;                    // homeへの確実な遷移処理&#10;                    if (navController.currentDestination?.id != R.id.nav_home) {&#10;                        navController.popBackStack(R.id.nav_home, false) &#10;                        if (navController.currentDestination?.id != R.id.nav_home) {&#10;                            navController.navigate(R.id.nav_home)&#10;                        }&#10;                    }&#10;                    binding.drawerLayout.closeDrawers()&#10;                    true&#10;                }&#10;                R.id.nav_chat -&gt; {&#10;                    if (navController.currentDestination?.id != R.id.nav_chat) {&#10;                        navController.navigate(R.id.nav_chat)&#10;                    }&#10;                    binding.drawerLayout.closeDrawers()&#10;                    true&#10;                }&#10;                R.id.nav_gallery -&gt; {&#10;                    if (navController.currentDestination?.id != R.id.nav_gallery) {&#10;                        navController.navigate(R.id.nav_gallery)&#10;                    }&#10;                    binding.drawerLayout.closeDrawers()&#10;                    true&#10;                }&#10;                R.id.nav_slideshow -&gt; {&#10;                    if (navController.currentDestination?.id != R.id.nav_slideshow) {&#10;                        navController.navigate(R.id.nav_slideshow)&#10;                    }&#10;                    binding.drawerLayout.closeDrawers()&#10;                    true&#10;                }&#10;                R.id.action_settings -&gt; {&#10;                    navController.navigate(R.id.action_settings)&#10;                    binding.drawerLayout.closeDrawers()&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;&#10;        // 初期状態でhomeを選択状態にする&#10;        navView.setCheckedItem(R.id.nav_home)&#10;        updateNavHeader()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateNavHeader()&#10;    }&#10;&#10;    private fun updateNavHeader() {&#10;        val navView: NavigationView = binding.navView&#10;        val headerView = navView.getHeaderView(0)&#10;        val userName = SettingsFragment.getUserName(this)&#10;        val agentName = SettingsFragment.getAgentName(this)&#10;&#10;        // ナビゲーションヘッダーのクリック機能を修正&#10;        val headerContainer = headerView.findViewById&lt;LinearLayout&gt;(R.id.nav_header_container)&#10;        headerContainer?.setOnClickListener {&#10;            val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;            // home画面がBackStack上に無い場合も含めて必ずhomeへ遷移&#10;            if (!navController.popBackStack(R.id.nav_home, false)) {&#10;                navController.navigate(R.id.nav_home)&#10;            }&#10;            binding.drawerLayout.closeDrawers() // ドロワーを閉じる&#10;        }&#10;&#10;        // id指定ではなく2番目のTextViewを取得&#10;        val titleTextView = headerView.findViewById&lt;TextView&gt;(R.id.nav_header_title)&#10;            ?: headerView.findViewById&lt;TextView&gt;(android.R.id.text1)&#10;            ?: headerView.findViewById&lt;TextView&gt;(headerView.resources.getIdentifier(&quot;nav_header_title&quot;, &quot;id&quot;, packageName))&#10;            ?: headerView.findViewById&lt;TextView&gt;(headerView.resources.getIdentifier(&quot;title&quot;, &quot;id&quot;, packageName))&#10;            ?: headerView.findViewById&lt;TextView&gt;(headerView.resources.getIdentifier(&quot;textView&quot;, &quot;id&quot;, packageName))&#10;            ?: (headerView as? LinearLayout)?.getChildAt(1) as? TextView&#10;        titleTextView?.text = &quot;$userName さん&quot;&#10;&#10;        // nav_chatメニュータイトルを動的に変更&#10;        val menu = navView.menu&#10;        val chatMenuItem = menu.findItem(R.id.nav_chat)&#10;        chatMenuItem?.title = &quot;$agentName と会話&quot;&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu): Boolean {&#10;        // Inflate the menu; this adds items to the action bar if it is present.&#10;        menuInflater.inflate(R.menu.main, menu)&#10;        return true&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: android.view.MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            R.id.action_settings -&gt; {&#10;                val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;                navController.navigate(R.id.action_settings)&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()&#10;    }&#10;&#10;    override fun onSettingsSaved() {&#10;        updateNavHeader()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/chat/ChatAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/chat/ChatAdapter.kt" />
              <option name="updatedContent" value="package com.example.voiceapp.ui.chat&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.cardview.widget.CardView&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.voiceapp.R&#10;&#10;class ChatAdapter : ListAdapter&lt;ChatMessage, ChatAdapter.ChatViewHolder&gt;(ChatDiffCallback()) {&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ChatViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_chat_message, parent, false)&#10;        return ChatViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ChatViewHolder, position: Int) {&#10;        holder.bind(getItem(position))&#10;    }&#10;&#10;    class ChatViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val cardUserMessage: CardView = itemView.findViewById(R.id.cardUserMessage)&#10;        private val cardAiMessage: CardView = itemView.findViewById(R.id.cardAiMessage)&#10;        private val tvUserMessage: TextView = itemView.findViewById(R.id.tvUserMessage)&#10;        private val tvAiMessage: TextView = itemView.findViewById(R.id.tvAiMessage)&#10;&#10;        fun bind(message: ChatMessage) {&#10;            if (message.isUser) {&#10;                cardUserMessage.visibility = View.VISIBLE&#10;                cardAiMessage.visibility = View.GONE&#10;                tvUserMessage.text = message.content&#10;            } else {&#10;                cardUserMessage.visibility = View.GONE&#10;                cardAiMessage.visibility = View.VISIBLE&#10;                tvAiMessage.text = message.content&#10;            }&#10;        }&#10;    }&#10;&#10;    class ChatDiffCallback : DiffUtil.ItemCallback&lt;ChatMessage&gt;() {&#10;        override fun areItemsTheSame(oldItem: ChatMessage, newItem: ChatMessage): Boolean {&#10;            return oldItem.timestamp == newItem.timestamp&#10;        }&#10;&#10;        override fun areContentsTheSame(oldItem: ChatMessage, newItem: ChatMessage): Boolean {&#10;            return oldItem == newItem&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/chat/ChatViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/chat/ChatViewModel.kt" />
              <option name="originalContent" value="package com.example.voiceapp.ui.chat&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.voiceapp.BuildConfig&#10;import com.example.voiceapp.api.Message&#10;import com.example.voiceapp.api.OpenAIClient&#10;import kotlinx.coroutines.launch&#10;&#10;data class ChatMessage(&#10;    val content: String,&#10;    val isUser: Boolean,&#10;    val timestamp: Long = System.currentTimeMillis()&#10;)&#10;&#10;class ChatViewModel : ViewModel() {&#10;&#10;    private val _messages = MutableLiveData&lt;List&lt;ChatMessage&gt;&gt;()&#10;    val messages: LiveData&lt;List&lt;ChatMessage&gt;&gt; = _messages&#10;&#10;    private val _isLoading = MutableLiveData&lt;Boolean&gt;()&#10;    val isLoading: LiveData&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _error = MutableLiveData&lt;String?&gt;()&#10;    val error: LiveData&lt;String?&gt; = _error&#10;&#10;    private val _isApiKeyConfigured = MutableLiveData&lt;Boolean&gt;()&#10;    val isApiKeyConfigured: LiveData&lt;Boolean&gt; = _isApiKeyConfigured&#10;&#10;    private var openAIClient: OpenAIClient? = null&#10;&#10;    init {&#10;        _messages.value = emptyList()&#10;        _isLoading.value = false&#10;        initializeApiKey()&#10;    }&#10;&#10;    private fun initializeApiKey() {&#10;        val apiKey = BuildConfig.OPENAI_API_KEY&#10;        if (apiKey.isNotEmpty() &amp;&amp; apiKey != &quot;your_openai_api_key_here&quot;) {&#10;            openAIClient = OpenAIClient(apiKey)&#10;            _isApiKeyConfigured.value = true&#10;        } else {&#10;            _isApiKeyConfigured.value = false&#10;            _error.value = &quot;local.propertiesファイルでOPENAI_API_KEYを設定してください&quot;&#10;        }&#10;    }&#10;&#10;    fun sendMessage(userMessage: String) {&#10;        if (userMessage.isBlank()) return&#10;&#10;        val client = openAIClient&#10;        if (client == null) {&#10;            _error.value = &quot;APIキーが設定されていません&quot;&#10;            return&#10;        }&#10;&#10;        // ユーザーメッセージを追加&#10;        val currentMessages = _messages.value?.toMutableList() ?: mutableListOf()&#10;        currentMessages.add(ChatMessage(userMessage, true))&#10;        _messages.value = currentMessages&#10;&#10;        _isLoading.value = true&#10;        _error.value = null&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                // OpenAI APIに送信するメッセージリストを作成&#10;                val apiMessages = currentMessages.map { chatMessage -&gt;&#10;                    Message(&#10;                        role = if (chatMessage.isUser) &quot;user&quot; else &quot;assistant&quot;,&#10;                        content = chatMessage.content&#10;                    )&#10;                }&#10;&#10;                val result = client.sendMessage(apiMessages)&#10;&#10;                result.fold(&#10;                    onSuccess = { response -&gt;&#10;                        val updatedMessages = _messages.value?.toMutableList() ?: mutableListOf()&#10;                        updatedMessages.add(ChatMessage(response, false))&#10;                        _messages.value = updatedMessages&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = &quot;エラー: ${exception.message}&quot;&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;予期しないエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearChat() {&#10;        _messages.value = emptyList()&#10;        _error.value = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.voiceapp.ui.chat&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.voiceapp.BuildConfig&#10;import com.example.voiceapp.api.Message&#10;import com.example.voiceapp.api.OpenAIClient&#10;import kotlinx.coroutines.launch&#10;&#10;data class ChatMessage(&#10;    val content: String,&#10;    val isUser: Boolean,&#10;    val timestamp: Long = System.currentTimeMillis()&#10;)&#10;&#10;class ChatViewModel : ViewModel() {&#10;&#10;    private val _messages = MutableLiveData&lt;List&lt;ChatMessage&gt;&gt;()&#10;    val messages: LiveData&lt;List&lt;ChatMessage&gt;&gt; = _messages&#10;&#10;    private val _isLoading = MutableLiveData&lt;Boolean&gt;()&#10;    val isLoading: LiveData&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _error = MutableLiveData&lt;String?&gt;()&#10;    val error: LiveData&lt;String?&gt; = _error&#10;&#10;    private val _isApiKeyConfigured = MutableLiveData&lt;Boolean&gt;()&#10;    val isApiKeyConfigured: LiveData&lt;Boolean&gt; = _isApiKeyConfigured&#10;&#10;    private var openAIClient: OpenAIClient? = null&#10;&#10;    init {&#10;        _messages.value = emptyList()&#10;        _isLoading.value = false&#10;        initializeApiKey()&#10;    }&#10;&#10;    private fun initializeApiKey() {&#10;        val apiKey = BuildConfig.OPENAI_API_KEY&#10;        val baseUrl = BuildConfig.OPENAI_BASE_URL&#10;&#10;        if (apiKey.isNotEmpty() &amp;&amp; apiKey != &quot;your_openai_api_key_here&quot;) {&#10;            openAIClient = OpenAIClient(apiKey, baseUrl)&#10;            _isApiKeyConfigured.value = true&#10;        } else {&#10;            _isApiKeyConfigured.value = false&#10;            _error.value = &quot;local.propertiesファイルでOPENAI_API_KEYを設定してください&quot;&#10;        }&#10;    }&#10;&#10;    fun sendMessage(userMessage: String) {&#10;        if (userMessage.isBlank()) return&#10;&#10;        val client = openAIClient&#10;        if (client == null) {&#10;            _error.value = &quot;APIキーが設定されていません&quot;&#10;            return&#10;        }&#10;&#10;        // ユーザーメッセージを追加&#10;        val currentMessages = _messages.value?.toMutableList() ?: mutableListOf()&#10;        currentMessages.add(ChatMessage(userMessage, true))&#10;        _messages.value = currentMessages&#10;&#10;        _isLoading.value = true&#10;        _error.value = null&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                // OpenAI APIに送信するメッセージリストを作成&#10;                val apiMessages = currentMessages.map { chatMessage -&gt;&#10;                    Message(&#10;                        role = if (chatMessage.isUser) &quot;user&quot; else &quot;assistant&quot;,&#10;                        content = chatMessage.content&#10;                    )&#10;                }&#10;&#10;                val result = client.sendMessage(apiMessages)&#10;&#10;                result.fold(&#10;                    onSuccess = { response -&gt;&#10;                        val updatedMessages = _messages.value?.toMutableList() ?: mutableListOf()&#10;                        updatedMessages.add(ChatMessage(response, false))&#10;                        _messages.value = updatedMessages&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = &quot;エラー: ${exception.message}&quot;&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;予期しないエラーが発生しました: ${e.message}&quot;&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearChat() {&#10;        _messages.value = emptyList()&#10;        _error.value = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/home/HomeFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/home/HomeFragment.kt" />
              <option name="originalContent" value="package com.example.voiceapp.ui.home&#10;&#10;import android.content.Context&#10;import android.net.ConnectivityManager&#10;import android.net.NetworkCapabilities&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.voiceapp.R&#10;import com.example.voiceapp.databinding.FragmentHomeBinding&#10;import com.example.voiceapp.ui.settings.SettingsFragment&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class HomeFragment : Fragment() {&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private var timeUpdateRunnable: Runnable? = null&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        setupUI()&#10;        setupClickListeners()&#10;        startTimeUpdates()&#10;        updateSystemStatus()&#10;        loadUserInfo()&#10;        loadUsageStats()&#10;    }&#10;&#10;    private fun setupUI() {&#10;        // 初期状態の設定&#10;        updateCurrentTime()&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        // チャット開始ボタン - fragment_chat.xmlに確実に移動&#10;        binding.btnGoToChat.setOnClickListener {&#10;            try {&#10;                findNavController().navigate(R.id.nav_chat)&#10;            } catch (e: Exception) {&#10;                // ナビゲーションエラーの場合のログ出力&#10;                android.util.Log.e(&quot;HomeFragment&quot;, &quot;Navigation to chat failed&quot;, e)&#10;            }&#10;        }&#10;&#10;        // 設定ボタン&#10;        binding.btnGoToSettings.setOnClickListener {&#10;            try {&#10;                findNavController().navigate(R.id.action_settings)&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;HomeFragment&quot;, &quot;Navigation to settings failed&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startTimeUpdates() {&#10;        timeUpdateRunnable = object : Runnable {&#10;            override fun run() {&#10;                updateCurrentTime()&#10;                handler.postDelayed(this, 60000) // 1分ごとに更新&#10;            }&#10;        }&#10;        handler.post(timeUpdateRunnable!!)&#10;    }&#10;&#10;    private fun updateCurrentTime() {&#10;        val formatter = SimpleDateFormat(&quot;yyyy/MM/dd HH:mm&quot;, Locale.getDefault())&#10;        binding.tvCurrentTime.text = formatter.format(Date())&#10;    }&#10;&#10;&#10;&#10;    private fun loadUserInfo() {&#10;        // 設定からユーザー名とエージェント名を読み込み&#10;        val userName = SettingsFragment.getUserName(requireContext())&#10;        val agentName = SettingsFragment.getAgentName(requireContext())&#10;&#10;        binding.tvUserName.text = userName&#10;        binding.tvAgentName.text = agentName&#10;    }&#10;&#10;    private fun loadUsageStats() {&#10;        // SharedPreferencesから使用統計を読み込み&#10;        val prefs = requireContext().getSharedPreferences(&quot;usage_stats&quot;, Context.MODE_PRIVATE)&#10;&#10;        val todayMessages = prefs.getInt(&quot;today_messages&quot;, 0)&#10;        val totalMessages = prefs.getInt(&quot;total_messages&quot;, 0)&#10;        val lastUsedTime = prefs.getLong(&quot;last_used_time&quot;, 0)&#10;&#10;        binding.tvTodayMessages.text = todayMessages.toString()&#10;        binding.tvTotalMessages.text = totalMessages.toString()&#10;&#10;        if (lastUsedTime &gt; 0) {&#10;            val formatter = SimpleDateFormat(&quot;MM/dd HH:mm&quot;, Locale.getDefault())&#10;            binding.tvLastUsed.text = formatter.format(Date(lastUsedTime))&#10;        } else {&#10;            binding.tvLastUsed.text = &quot;-&quot;&#10;        }&#10;    }&#10;&#10;    private fun isNetworkAvailable(): Boolean {&#10;        val connectivityManager = requireContext().getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager&#10;        val network = connectivityManager.activeNetwork ?: return false&#10;        val networkCapabilities = connectivityManager.getNetworkCapabilities(network) ?: return false&#10;&#10;        return networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||&#10;                networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) ||&#10;                networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // 画面が表示されるたびに情報を更新&#10;        updateSystemStatus()&#10;        loadUserInfo()&#10;        loadUsageStats()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        timeUpdateRunnable?.let { handler.removeCallbacks(it) }&#10;        _binding = null&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.voiceapp.ui.home&#10;&#10;import android.content.Context&#10;import android.net.ConnectivityManager&#10;import android.net.NetworkCapabilities&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.voiceapp.R&#10;import com.example.voiceapp.databinding.FragmentHomeBinding&#10;import com.example.voiceapp.ui.settings.SettingsFragment&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class HomeFragment : Fragment() {&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private var timeUpdateRunnable: Runnable? = null&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        setupUI()&#10;        setupClickListeners()&#10;        startTimeUpdates()&#10;        updateSystemStatus()&#10;        loadUserInfo()&#10;        loadUsageStats()&#10;    }&#10;&#10;    private fun setupUI() {&#10;        // 初期状態の設定&#10;        updateCurrentTime()&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        // チャット開始ボタン - fragment_chat.xmlに確実に移動&#10;        binding.btnGoToChat.setOnClickListener {&#10;            try {&#10;                findNavController().navigate(R.id.nav_chat)&#10;            } catch (e: Exception) {&#10;                // ナビゲーションエラーの場合のログ出力&#10;                android.util.Log.e(&quot;HomeFragment&quot;, &quot;Navigation to chat failed&quot;, e)&#10;            }&#10;        }&#10;&#10;        // 設定ボタン&#10;        binding.btnGoToSettings.setOnClickListener {&#10;            try {&#10;                findNavController().navigate(R.id.action_settings)&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;HomeFragment&quot;, &quot;Navigation to settings failed&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startTimeUpdates() {&#10;        timeUpdateRunnable = object : Runnable {&#10;            override fun run() {&#10;                updateCurrentTime()&#10;                handler.postDelayed(this, 60000) // 1分ごとに更新&#10;            }&#10;        }&#10;        handler.post(timeUpdateRunnable!!)&#10;    }&#10;&#10;    private fun updateCurrentTime() {&#10;        val formatter = SimpleDateFormat(&quot;yyyy/MM/dd HH:mm&quot;, Locale.getDefault())&#10;        binding.tvCurrentTime.text = formatter.format(Date())&#10;    }&#10;&#10;    private fun updateSystemStatus() {&#10;        // みずやりステータス&#10;        binding.ivWateringStatus.setColorFilter(ContextCompat.getColor(requireContext(), android.R.color.holo_green_dark))&#10;        binding.tvWateringStatus.text = &quot;完了&quot;&#10;        binding.tvWateringStatusBadge.text = &quot;OK&quot;&#10;        binding.tvWateringStatusBadge.setBackgroundResource(R.drawable.badge_success)&#10;&#10;        // きぶんステータス&#10;        binding.ivMoodStatus.setColorFilter(ContextCompat.getColor(requireContext(), android.R.color.holo_green_dark))&#10;        binding.tvMoodStatus.text = &quot;よい&quot;&#10;        binding.tvMoodStatusBadge.text = &quot;良好&quot;&#10;        binding.tvMoodStatusBadge.setBackgroundResource(R.drawable.badge_success)&#10;&#10;        // API接続ステータス&#10;        binding.ivApiStatus.setColorFilter(ContextCompat.getColor(requireContext(), android.R.color.holo_green_dark))&#10;        binding.tvApiStatus.text = &quot;接続済み&quot;&#10;        binding.tvApiStatusBadge.text = &quot;正常&quot;&#10;        binding.tvApiStatusBadge.setBackgroundResource(R.drawable.badge_success)&#10;&#10;        // ネットワークステータス&#10;        val isConnected = isNetworkAvailable()&#10;        if (isConnected) {&#10;            binding.ivNetworkStatus.setColorFilter(ContextCompat.getColor(requireContext(), android.R.color.holo_green_dark))&#10;            binding.tvNetworkStatus.text = &quot;インターネットに接続済み&quot;&#10;            binding.tvNetworkStatusBadge.text = &quot;接続中&quot;&#10;            binding.tvNetworkStatusBadge.setBackgroundResource(R.drawable.badge_success)&#10;        } else {&#10;            binding.ivNetworkStatus.setColorFilter(ContextCompat.getColor(requireContext(), android.R.color.holo_red_dark))&#10;            binding.tvNetworkStatus.text = &quot;インターネット接続なし&quot;&#10;            binding.tvNetworkStatusBadge.text = &quot;切断&quot;&#10;            binding.tvNetworkStatusBadge.setBackgroundResource(R.drawable.badge_error)&#10;        }&#10;&#10;        // 音声認識ステータス&#10;        val isVoiceAvailable = true // 仮の値&#10;        if (isVoiceAvailable) {&#10;            binding.ivVoiceStatus.setColorFilter(ContextCompat.getColor(requireContext(), android.R.color.holo_green_dark))&#10;            binding.tvVoiceStatus.text = &quot;音声認識利用可能&quot;&#10;            binding.tvVoiceStatusBadge.text = &quot;準備完了&quot;&#10;            binding.tvVoiceStatusBadge.setBackgroundResource(R.drawable.badge_success)&#10;        } else {&#10;            binding.ivVoiceStatus.setColorFilter(ContextCompat.getColor(requireContext(), android.R.color.holo_red_dark))&#10;            binding.tvVoiceStatus.text = &quot;音声認識利用不可&quot;&#10;            binding.tvVoiceStatusBadge.text = &quot;無効&quot;&#10;            binding.tvVoiceStatusBadge.setBackgroundResource(R.drawable.badge_error)&#10;        }&#10;    }&#10;&#10;    private fun loadUserInfo() {&#10;        // 設定からユーザー名とエージェント名を読み込み&#10;        val userName = SettingsFragment.getUserName(requireContext())&#10;        val agentName = SettingsFragment.getAgentName(requireContext())&#10;&#10;        binding.tvUserName.text = userName&#10;        binding.tvAgentName.text = agentName&#10;    }&#10;&#10;    private fun loadUsageStats() {&#10;        // SharedPreferencesから使用統計を読み込み&#10;        val prefs = requireContext().getSharedPreferences(&quot;usage_stats&quot;, Context.MODE_PRIVATE)&#10;&#10;        val todayMessages = prefs.getInt(&quot;today_messages&quot;, 0)&#10;        val totalMessages = prefs.getInt(&quot;total_messages&quot;, 0)&#10;        val lastUsedTime = prefs.getLong(&quot;last_used_time&quot;, 0)&#10;&#10;        binding.tvTodayMessages.text = todayMessages.toString()&#10;        binding.tvTotalMessages.text = totalMessages.toString()&#10;&#10;        if (lastUsedTime &gt; 0) {&#10;            val formatter = SimpleDateFormat(&quot;MM/dd HH:mm&quot;, Locale.getDefault())&#10;            binding.tvLastUsed.text = formatter.format(Date(lastUsedTime))&#10;        } else {&#10;            binding.tvLastUsed.text = &quot;-&quot;&#10;        }&#10;    }&#10;&#10;    private fun isNetworkAvailable(): Boolean {&#10;        val connectivityManager = requireContext().getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager&#10;        val network = connectivityManager.activeNetwork ?: return false&#10;        val networkCapabilities = connectivityManager.getNetworkCapabilities(network) ?: return false&#10;&#10;        return networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||&#10;                networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) ||&#10;                networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // 画面が表示されるたびに情報を更新&#10;        updateSystemStatus()&#10;        loadUserInfo()&#10;        loadUsageStats()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        timeUpdateRunnable?.let { handler.removeCallbacks(it) }&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/settings/SettingsFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/voiceapp/ui/settings/SettingsFragment.kt" />
              <option name="originalContent" value="package com.example.voiceapp.ui.settings&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import com.example.voiceapp.BuildConfig&#10;import com.example.voiceapp.databinding.FragmentSettingsBinding&#10;&#10;class SettingsFragment : Fragment() {&#10;&#10;    private var _binding: FragmentSettingsBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var sharedPreferences: SharedPreferences&#10;&#10;    companion object {&#10;        private const val PREFS_NAME = &quot;user_settings&quot;&#10;        private const val KEY_USER_NAME = &quot;user_name&quot;&#10;        private const val KEY_AGENT_NAME = &quot;agent_name&quot;&#10;&#10;        // デフォルト値&#10;        const val DEFAULT_USER_NAME = &quot;ユーザー&quot;&#10;        const val DEFAULT_AGENT_NAME = &quot;AIアシスタント&quot;&#10;&#10;        fun getUserName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_USER_NAME, DEFAULT_USER_NAME) ?: DEFAULT_USER_NAME&#10;        }&#10;&#10;        fun getAgentName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME) ?: DEFAULT_AGENT_NAME&#10;        }&#10;    }&#10;&#10;    interface OnSettingsSavedListener {&#10;        fun onSettingsSaved()&#10;    }&#10;    private var settingsSavedListener: OnSettingsSavedListener? = null&#10;&#10;    override fun onAttach(context: Context) {&#10;        super.onAttach(context)&#10;        if (context is OnSettingsSavedListener) {&#10;            settingsSavedListener = context&#10;        }&#10;    }&#10;&#10;    override fun onDetach() {&#10;        super.onDetach()&#10;        settingsSavedListener = null&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentSettingsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        sharedPreferences = requireContext().getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;//        setupUI()&#10;        loadUserSettings()&#10;//        setupClickListeners()&#10;    }&#10;&#10;//    private fun setupUI() {&#10;//        // APIキーの状態を表示&#10;//        val apiKey = BuildConfig.OPENAI_API_KEY&#10;//        if (apiKey.isNotEmpty() &amp;&amp; apiKey != &quot;your_openai_api_key_here&quot;) {&#10;//            binding.tvApiKeyStatus.text = &quot;APIキー: 設定済み (${apiKey.take(10)}...)&quot;&#10;//        } else {&#10;//            binding.tvApiKeyStatus.text = &quot;APIキー: 未設定&quot;&#10;//        }&#10;//&#10;//        // Base URLを表示&#10;//        binding.tvBaseUrlStatus.text = &quot;Base URL: ${BuildConfig.OPENAI_BASE_URL}&quot;&#10;//    }&#10;&#10;    private fun loadUserSettings() {&#10;        // 保存された設定を読み込み&#10;        val userName = sharedPreferences.getString(KEY_USER_NAME, DEFAULT_USER_NAME)&#10;        val agentName = sharedPreferences.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME)&#10;&#10;        binding.etUserName.setText(userName)&#10;        binding.etAgentName.setText(agentName)&#10;    }&#10;//&#10;//    private fun setupClickListeners() {&#10;//        binding.btnSaveUserSettings.setOnClickListener {&#10;//            saveUserSettings()&#10;//        }&#10;&#10;//        binding.btnClearCache.setOnClickListener {&#10;//            // チャット履歴クリア機能（後で実装）&#10;//            Toast.makeText(context, &quot;チャット履歴をクリアしました&quot;, Toast.LENGTH_SHORT).show()&#10;//        }&#10;//&#10;//        binding.btnAbout.setOnClickListener {&#10;//            Toast.makeText(context, &quot;Voice App v1.0\nOpenAI互換API対応nav_chatにはfragment_settings.xmlで設定したagent名を表示させてくださいチャットアプリ&quot;, Toast.LENGTH_LONG).show()&#10;//        }&#10;//    }&#10;&#10;    private fun saveUserSettings() {&#10;        val userName = binding.etUserName.text.toString().trim()&#10;        val agentName = binding.etAgentName.text.toString().trim()&#10;&#10;        // 空の場合はデフォルト値を使用&#10;        val finalUserName = if (userName.isEmpty()) DEFAULT_USER_NAME else userName&#10;        val finalAgentName = if (agentName.isEmpty()) DEFAULT_AGENT_NAME else agentName&#10;&#10;        // SharedPreferencesに保存&#10;        sharedPreferences.edit()&#10;            .putString(KEY_USER_NAME, finalUserName)&#10;            .putString(KEY_AGENT_NAME, finalAgentName)&#10;            .apply()&#10;&#10;        // UIを更新&#10;        binding.etUserName.setText(finalUserName)&#10;        binding.etAgentName.setText(finalAgentName)&#10;&#10;        Toast.makeText(context, &quot;設定を保存しました&quot;, Toast.LENGTH_SHORT).show()&#10;        settingsSavedListener?.onSettingsSaved()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.voiceapp.ui.settings&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import com.example.voiceapp.BuildConfig&#10;import com.example.voiceapp.databinding.FragmentSettingsBinding&#10;&#10;class SettingsFragment : Fragment() {&#10;&#10;    private var _binding: FragmentSettingsBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var sharedPreferences: SharedPreferences&#10;&#10;    companion object {&#10;        private const val PREFS_NAME = &quot;user_settings&quot;&#10;        private const val KEY_USER_NAME = &quot;user_name&quot;&#10;        private const val KEY_AGENT_NAME = &quot;agent_name&quot;&#10;&#10;        // デフォルト値&#10;        const val DEFAULT_USER_NAME = &quot;ユーザー&quot;&#10;        const val DEFAULT_AGENT_NAME = &quot;AIアシスタント&quot;&#10;&#10;        fun getUserName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_USER_NAME, DEFAULT_USER_NAME) ?: DEFAULT_USER_NAME&#10;        }&#10;&#10;        fun getAgentName(context: Context): String {&#10;            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;            return prefs.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME) ?: DEFAULT_AGENT_NAME&#10;        }&#10;    }&#10;&#10;    interface OnSettingsSavedListener {&#10;        fun onSettingsSaved()&#10;    }&#10;    private var settingsSavedListener: OnSettingsSavedListener? = null&#10;&#10;    override fun onAttach(context: Context) {&#10;        super.onAttach(context)&#10;        if (context is OnSettingsSavedListener) {&#10;            settingsSavedListener = context&#10;        }&#10;    }&#10;&#10;    override fun onDetach() {&#10;        super.onDetach()&#10;        settingsSavedListener = null&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentSettingsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        sharedPreferences = requireContext().getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        loadUserSettings()&#10;        setupClickListeners()&#10;    }&#10;&#10;//    private fun setupUI() {&#10;//        // APIキーの状態を表示&#10;//        val apiKey = BuildConfig.OPENAI_API_KEY&#10;//        if (apiKey.isNotEmpty() &amp;&amp; apiKey != &quot;your_openai_api_key_here&quot;) {&#10;//            binding.tvApiKeyStatus.text = &quot;APIキー: 設定済み (${apiKey.take(10)}...)&quot;&#10;//        } else {&#10;//            binding.tvApiKeyStatus.text = &quot;APIキー: 未設定&quot;&#10;//        }&#10;//&#10;//        // Base URLを表示&#10;//        binding.tvBaseUrlStatus.text = &quot;Base URL: ${BuildConfig.OPENAI_BASE_URL}&quot;&#10;//    }&#10;&#10;    private fun loadUserSettings() {&#10;        // 保存された設定を読み込み&#10;        val userName = sharedPreferences.getString(KEY_USER_NAME, DEFAULT_USER_NAME)&#10;        val agentName = sharedPreferences.getString(KEY_AGENT_NAME, DEFAULT_AGENT_NAME)&#10;&#10;        binding.etUserName.setText(userName)&#10;        binding.etAgentName.setText(agentName)&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        binding.btnSaveUserSettings.setOnClickListener {&#10;            saveUserSettings()&#10;        }&#10;    }&#10;&#10;    private fun saveUserSettings() {&#10;        val userName = binding.etUserName.text.toString().trim()&#10;        val agentName = binding.etAgentName.text.toString().trim()&#10;&#10;        // 空の場合はデフォルト値を使用&#10;        val finalUserName = if (userName.isEmpty()) DEFAULT_USER_NAME else userName&#10;        val finalAgentName = if (agentName.isEmpty()) DEFAULT_AGENT_NAME else agentName&#10;&#10;        // SharedPreferencesに保存&#10;        sharedPreferences.edit()&#10;            .putString(KEY_USER_NAME, finalUserName)&#10;            .putString(KEY_AGENT_NAME, finalAgentName)&#10;            .apply()&#10;&#10;        // UIを更新&#10;        binding.etUserName.setText(finalUserName)&#10;        binding.etAgentName.setText(finalAgentName)&#10;&#10;        Toast.makeText(context, &quot;設定を保存しました&quot;, Toast.LENGTH_SHORT).show()&#10;        settingsSavedListener?.onSettingsSaved()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/badge_error.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/badge_error.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#F44336&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/badge_success.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/badge_success.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#4CAF50&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/badge_warning.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/badge_warning.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#FF9800&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;    &#10;    &lt;!-- 家の屋根 --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z&quot;/&gt;&#10;        &#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_home_detailed.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_home_detailed.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorPrimary&quot;&gt;&#10;    &#10;    &lt;!-- 家の本体 --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M3,12l2,0l0,8l6,0l0,-6l2,0l0,6l6,0l0,-8l2,0l-9,-9z&quot;/&gt;&#10;    &#10;    &lt;!-- ドア --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M11,16l2,0l0,4l-2,0z&quot;/&gt;&#10;        &#10;    &lt;!-- 窓 --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M7,14l1.5,0l0,1.5l-1.5,0z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M15.5,14l1.5,0l0,1.5l-1.5,0z&quot;/&gt;&#10;        &#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_chat.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_chat.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;!-- API Key状態表示エリア --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardApiStatus&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        app:cardElevation=&quot;4dp&quot;&#10;        app:cardCornerRadius=&quot;8dp&quot;/&gt;&#10;&#10;    &lt;!-- チャットメッセージ表示エリア --&gt;&#10;&#10;    &lt;ProgressBar&#10;        android:id=&quot;@+id/progressBar&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:visibility=&quot;visible&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvMessages&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;!-- エラーメッセージ --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvError&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#10;        android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;        android:visibility=&quot;gone&quot; /&gt;&#10;&#10;    &lt;!-- メッセージ入力エリア --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:hint=&quot;メッセージを入力&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/etMessage&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:maxLines=&quot;4&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btnSend&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:text=&quot;送信&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- ローディングインジケーター --&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:orientation=&quot;vertical&quot;&#13;&#10;    android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- エージェント名表示エリア --&gt;&#13;&#10;    &lt;com.google.android.material.card.MaterialCardView&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#13;&#10;        app:cardElevation=&quot;2dp&quot;&#13;&#10;        app:cardCornerRadius=&quot;8dp&quot;&gt;&#13;&#10;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;horizontal&quot;&#13;&#10;            android:padding=&quot;12dp&quot;&#13;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#13;&#10;&#13;&#10;            &lt;ImageView&#13;&#10;                android:layout_width=&quot;24dp&quot;&#13;&#10;                android:layout_height=&quot;24dp&quot;&#13;&#10;                android:src=&quot;@drawable/ic_chat&quot;&#13;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/tvAgentName&quot;&#13;&#10;                android:layout_width=&quot;0dp&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_weight=&quot;1&quot;&#13;&#10;                android:text=&quot;AIアシスタント&quot;&#13;&#10;                android:textSize=&quot;16sp&quot;&#13;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#13;&#10;&#13;&#10;    &lt;!-- API Key状態表示エリア --&gt;&#13;&#10;    &lt;com.google.android.material.card.MaterialCardView&#13;&#10;        android:id=&quot;@+id/cardApiStatus&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#13;&#10;        app:cardElevation=&quot;4dp&quot;&#13;&#10;        app:cardCornerRadius=&quot;8dp&quot;/&gt;&#13;&#10;&#13;&#10;    &lt;!-- チャットメッセージ表示エリア --&gt;&#13;&#10;&#13;&#10;    &lt;ProgressBar&#13;&#10;        android:id=&quot;@+id/progressBar&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_gravity=&quot;center&quot;&#13;&#10;        android:layout_marginTop=&quot;8dp&quot;&#13;&#10;        android:visibility=&quot;visible&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#13;&#10;        android:id=&quot;@+id/rvMessages&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;0dp&quot;&#13;&#10;        android:layout_weight=&quot;1&quot;&#13;&#10;        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- エラーメッセージ --&gt;&#13;&#10;    &lt;TextView&#13;&#10;        android:id=&quot;@+id/tvError&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#13;&#10;        android:textColor=&quot;@android:color/holo_red_dark&quot;&#13;&#10;        android:visibility=&quot;gone&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- メッセージ入力エリア --&gt;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#13;&#10;&#13;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#13;&#10;            android:layout_width=&quot;0dp&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_weight=&quot;1&quot;&#13;&#10;            android:hint=&quot;メッセージを入力&quot;&gt;&#13;&#10;&#13;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#13;&#10;                android:id=&quot;@+id/etMessage&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:maxLines=&quot;4&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#13;&#10;&#13;&#10;        &lt;com.google.android.material.button.MaterialButton&#13;&#10;            android:id=&quot;@+id/btnSend&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginStart=&quot;8dp&quot;&#13;&#10;            android:text=&quot;送信&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;!-- ローディングインジケーター --&gt;&#13;&#10;&#13;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    tools:context=&quot;.ui.home.HomeFragment&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- ヘッダー --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:src=&quot;@drawable/ic_chat&quot;&#10;                android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Voice App&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvCurrentTime&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;2025/01/07 12:00&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- システムステータス --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;システムステータス&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;!-- みずやりステータス --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivWateringStatus&quot;&#10;                        android:layout_width=&quot;24dp&quot;&#10;                        android:layout_height=&quot;24dp&quot;&#10;                        android:src=&quot;@android:drawable/ic_dialog_info&quot;&#10;                        android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;みずやり&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvWateringStatusBadge&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;OK&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:background=&quot;@drawable/badge_success&quot;&#10;                        android:paddingHorizontal=&quot;8dp&quot;&#10;                        android:paddingVertical=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- きぶんステータス --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivMoodStatus&quot;&#10;                        android:layout_width=&quot;24dp&quot;&#10;                        android:layout_height=&quot;24dp&quot;&#10;                        android:src=&quot;@android:drawable/ic_dialog_info&quot;&#10;                        android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;きぶん&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvMoodStatusBadge&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;良好&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:background=&quot;@drawable/badge_success&quot;&#10;                        android:paddingHorizontal=&quot;8dp&quot;&#10;                        android:paddingVertical=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- ユーザー情報 --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;ユーザー情報&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;ユーザー名：&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvUserName&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;ユーザー&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;AIアシスタント名：&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvAgentName&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;AIアシスタント&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- 使用統計 --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;使用統計&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;今日のメッセージ数：&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvTodayMessages&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;0&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;総メッセージ数：&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvTotalMessages&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;0&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;最終使用日時：&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvLastUsed&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;-&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- クイックアクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;クイックアクション&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnGoToChat&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:layout_marginEnd=&quot;8dp&quot;&#10;                        android:text=&quot;チャット開始&quot;&#10;                        android:drawableLeft=&quot;@drawable/ic_chat&quot;&#10;                        android:drawablePadding=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnGoToSettings&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:layout_marginStart=&quot;8dp&quot;&#10;                        android:text=&quot;設定&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot;&#10;                        android:drawableLeft=&quot;@android:drawable/ic_menu_preferences&quot;&#10;                        android:drawablePadding=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    tools:context=&quot;.ui.home.HomeFragment&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- ヘッダー --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:src=&quot;@drawable/ic_chat&quot;&#10;                android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Voice App&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvCurrentTime&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;2025/01/07 12:00&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- システムステータス --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;システムステータス&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;!-- みずやりステータス --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivWateringStatus&quot;&#10;                        android:layout_width=&quot;24dp&quot;&#10;                        android:layout_height=&quot;24dp&quot;&#10;                        android:src=&quot;@android:drawable/ic_dialog_info&quot;&#10;                        android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;みずやり&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tvWateringStatus&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;完了&quot;&#10;                            android:textSize=&quot;12sp&quot;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvWateringStatusBadge&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;OK&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:background=&quot;@drawable/badge_success&quot;&#10;                        android:paddingHorizontal=&quot;8dp&quot;&#10;                        android:paddingVertical=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- きぶんステータス --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivMoodStatus&quot;&#10;                        android:layout_width=&quot;24dp&quot;&#10;                        android:layout_height=&quot;24dp&quot;&#10;                        android:src=&quot;@android:drawable/ic_dialog_info&quot;&#10;                        android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;きぶん&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tvMoodStatus&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;よい&quot;&#10;                            android:textSize=&quot;12sp&quot;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvMoodStatusBadge&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;良好&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:background=&quot;@drawable/badge_success&quot;&#10;                        android:paddingHorizontal=&quot;8dp&quot;&#10;                        android:paddingVertical=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- API接続ステータス --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivApiStatus&quot;&#10;                        android:layout_width=&quot;24dp&quot;&#10;                        android:layout_height=&quot;24dp&quot;&#10;                        android:src=&quot;@android:drawable/ic_dialog_info&quot;&#10;                        android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;API接続&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tvApiStatus&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;接続済み&quot;&#10;                            android:textSize=&quot;12sp&quot;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvApiStatusBadge&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;正常&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:background=&quot;@drawable/badge_success&quot;&#10;                        android:paddingHorizontal=&quot;8dp&quot;&#10;                        android:paddingVertical=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- ネットワークステータス --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivNetworkStatus&quot;&#10;                        android:layout_width=&quot;24dp&quot;&#10;                        android:layout_height=&quot;24dp&quot;&#10;                        android:src=&quot;@android:drawable/ic_dialog_info&quot;&#10;                        android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;ネットワーク&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tvNetworkStatus&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;接続確認中...&quot;&#10;                            android:textSize=&quot;12sp&quot;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvNetworkStatusBadge&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;接続中&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:background=&quot;@drawable/badge_success&quot;&#10;                        android:paddingHorizontal=&quot;8dp&quot;&#10;                        android:paddingVertical=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- 音声認識ステータス --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/ivVoiceStatus&quot;&#10;                        android:layout_width=&quot;24dp&quot;&#10;                        android:layout_height=&quot;24dp&quot;&#10;                        android:src=&quot;@android:drawable/ic_btn_speak_now&quot;&#10;                        android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;音声認識&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tvVoiceStatus&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;利用可能&quot;&#10;                            android:textSize=&quot;12sp&quot;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvVoiceStatusBadge&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;準備完了&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:background=&quot;@drawable/badge_success&quot;&#10;                        android:paddingHorizontal=&quot;8dp&quot;&#10;                        android:paddingVertical=&quot;4dp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- ユーザー情報 --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;ユーザー情報&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;ユーザー名：&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvUserName&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;ユーザー&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;AIアシスタント名：&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvAgentName&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;AIアシスタント&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- 使用統計 --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;使用統計&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;今日のメッセージ数：&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvTodayMessages&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;0&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;総メッセージ数：&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvTotalMessages&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;0&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;最終使用日時：&quot;&#10;                        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvLastUsed&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;-&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- クイックアクション --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;クイックアクション&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnGoToChat&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:layout_marginEnd=&quot;8dp&quot;&#10;                        android:text=&quot;チャット開始&quot;&#10;                        android:drawableLeft=&quot;@drawable/ic_chat&quot;&#10;                        android:drawablePadding=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnGoToSettings&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:layout_marginStart=&quot;8dp&quot;&#10;                        android:text=&quot;設定&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot;&#10;                        android:drawableLeft=&quot;@android:drawable/ic_menu_preferences&quot;&#10;                        android:drawablePadding=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_chat_message.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_chat_message.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginVertical=&quot;4dp&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;    &lt;!-- ユーザーメッセージ --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardUserMessage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;end&quot;&#10;        android:layout_marginStart=&quot;64dp&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:backgroundTint=&quot;@color/design_default_color_primary&quot;&#10;        app:cardCornerRadius=&quot;16dp&quot;&#10;        app:cardElevation=&quot;2dp&quot;&#10;        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvUserMessage&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- AIメッセージ --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardAiMessage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:layout_marginEnd=&quot;64dp&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:backgroundTint=&quot;@color/design_default_color_surface&quot;&#10;        app:cardCornerRadius=&quot;16dp&quot;&#10;        app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvAiMessage&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:textColor=&quot;@color/design_default_color_on_surface&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginVertical=&quot;4dp&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;    &lt;!-- ユーザーメッセージ --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardUserMessage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;end&quot;&#10;        android:layout_marginStart=&quot;64dp&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:backgroundTint=&quot;@color/design_default_color_primary&quot;&#10;        app:cardCornerRadius=&quot;16dp&quot;&#10;        app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvUserMessage&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- AIメッセージ --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardAiMessage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:layout_marginEnd=&quot;64dp&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:backgroundTint=&quot;@color/design_default_color_surface&quot;&#10;        app:cardCornerRadius=&quot;16dp&quot;&#10;        app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvAiMessage&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:textColor=&quot;@color/design_default_color_on_surface&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/nav_header_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/nav_header_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_header_container&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;@dimen/nav_header_height&quot;&#10;    android:background=&quot;@drawable/side_nav_bar&quot;&#10;    android:gravity=&quot;bottom&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;&#10;    android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;&#10;    android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;&#10;    android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot;&#10;    android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&#10;    android:background=&quot;?android:attr/selectableItemBackground&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/imageView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:contentDescription=&quot;@string/nav_header_desc&quot;&#10;        android:paddingTop=&quot;@dimen/nav_header_vertical_spacing&quot;&#10;        app:srcCompat=&quot;@mipmap/ic_launcher_round&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/nav_header_title&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:paddingTop=&quot;@dimen/nav_header_vertical_spacing&quot;&#10;        android:text=&quot;@string/nav_header_title&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.AppCompat.Body1&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/nav_header_subtitle&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;ホーム画面に戻る&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:alpha=&quot;0.7&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_header_container&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;@dimen/nav_header_height&quot;&#10;    android:background=&quot;@drawable/side_nav_bar&quot;&#10;    android:gravity=&quot;bottom&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;&#10;    android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;&#10;    android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;&#10;    android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot;&#10;    android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/imageView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:contentDescription=&quot;@string/nav_header_desc&quot;&#10;        android:paddingTop=&quot;@dimen/nav_header_vertical_spacing&quot;&#10;        app:srcCompat=&quot;@mipmap/ic_launcher_round&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/nav_header_title&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:paddingTop=&quot;@dimen/nav_header_vertical_spacing&quot;&#10;        android:text=&quot;@string/nav_header_title&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.AppCompat.Body1&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/nav_header_subtitle&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;ホーム画面に戻る&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:alpha=&quot;0.7&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/activity_main_drawer.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/activity_main_drawer.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    tools:showIn=&quot;navigation_view&quot;&gt;&#10;&#10;    &lt;group android:checkableBehavior=&quot;single&quot;&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_home&quot;&#10;            android:icon=&quot;@android:drawable/ic_&quot;&#10;            android:title=&quot;@string/menu_home&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_chat&quot;&#10;            android:icon=&quot;@drawable/ic_chat&quot;&#10;            android:title=&quot;AIチャット&quot; /&gt;&#10;&#10;    &lt;/group&gt;&#10;&#10;    &lt;item android:title=&quot;その他&quot;&gt;&#10;        &lt;menu&gt;&#10;            &lt;item&#10;                android:id=&quot;@+id/action_settings&quot;&#10;                android:icon=&quot;@android:drawable/ic_menu_preferences&quot;&#10;                android:title=&quot;設定&quot; /&gt;&#10;        &lt;/menu&gt;&#10;    &lt;/item&gt;&#10;&#10;&lt;/menu&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    tools:showIn=&quot;navigation_view&quot;&gt;&#10;&#10;    &lt;group android:checkableBehavior=&quot;single&quot;&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_home&quot;&#10;            android:icon=&quot;@drawable/ic_home&quot;&#10;            android:title=&quot;@string/menu_home&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_chat&quot;&#10;            android:icon=&quot;@drawable/ic_chat&quot;&#10;            android:title=&quot;AIチャット&quot; /&gt;&#10;&#10;    &lt;/group&gt;&#10;&#10;    &lt;item android:title=&quot;その他&quot;&gt;&#10;        &lt;menu&gt;&#10;            &lt;item&#10;                android:id=&quot;@+id/action_settings&quot;&#10;                android:icon=&quot;@android:drawable/ic_menu_preferences&quot;&#10;                android:title=&quot;設定&quot; /&gt;&#10;        &lt;/menu&gt;&#10;    &lt;/item&gt;&#10;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>